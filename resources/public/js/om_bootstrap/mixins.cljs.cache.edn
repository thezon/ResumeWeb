;; Analyzed by ClojureScript 0.0-3211
{:use-macros {defmixin om-tools.mixin}, :excludes #{}, :name om-bootstrap.mixins, :imports nil, :requires {s schema.core, schema.core schema.core, om-tools.mixin om-tools.mixin, om om.core, om.core om.core, cljs.core.async cljs.core.async, a cljs.core.async}, :uses {put! cljs.core.async}, :defs {collapsible-mixin {:doc "Mixin that enables collapsible Panels. Similar to the Dropdown\n   Mixin it only manages a single piece of state - :collapsed?. The Panel\n   is opened and closen by clicking on the header.", :meta {:end-column 28, :end-line 107, :column 11, :line 107, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\mixins.cljs"}, :file "resources\\public\\js\\om_bootstrap\\mixins.cljs", :line 107, :column 1, :end-line 107, :end-column 28, :test true, :name om-bootstrap.mixins/collapsible-mixin}, dropdown-mixin {:doc "Mixin that manages a single piece of state - :open?. If a user\n  clicks outside the component's owning dom element OR hits the escape\n  key, the state will jump back to false.\n\n  Down the road this may need to register a callback when the state\n  changes.", :meta {:end-column 25, :end-line 87, :column 11, :line 87, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\mixins.cljs"}, :file "resources\\public\\js\\om_bootstrap\\mixins.cljs", :line 87, :column 1, :end-line 87, :end-column 25, :test true, :name om-bootstrap.mixins/dropdown-mixin}, unbind-root-close-handlers! {:protocol-inline nil, :meta {:arglists (quote ([owner])), :doc "If they're present on the owning object, removes the listeners\n  registered by the dropdown mixin.", :end-column 34, :end-line 79, :column 7, :line 79, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\mixins.cljs"}, :name om-bootstrap.mixins/unbind-root-close-handlers!, :variadic false, :file "resources\\public\\js\\om_bootstrap\\mixins.cljs", :end-column 34, :method-params ([owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([owner])), :doc "If they're present on the owning object, removes the listeners\n  registered by the dropdown mixin.", :test true}, bind-root-close-handlers! {:protocol-inline nil, :meta {:arglists (quote ([owner])), :doc "For dropdowns, binds a handler for that sets the dropdown-mixin's\n  `:open?` state to false if the user clicks outside the owning\n  component OR hits the escape key.", :end-column 32, :end-line 60, :column 7, :line 60, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\mixins.cljs"}, :name om-bootstrap.mixins/bind-root-close-handlers!, :variadic false, :file "resources\\public\\js\\om_bootstrap\\mixins.cljs", :end-column 32, :method-params ([owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([owner])), :doc "For dropdowns, binds a handler for that sets the dropdown-mixin's\n  `:open?` state to false if the user clicks outside the owning\n  component OR hits the escape key.", :test true}, ESCAPE_KEY {:meta {:end-column 16, :end-line 58, :column 6, :line 58, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\mixins.cljs"}, :file "resources\\public\\js\\om_bootstrap\\mixins.cljs", :line 58, :column 1, :end-line 58, :end-column 16, :test true, :name om-bootstrap.mixins/ESCAPE_KEY}, in-root? {:protocol-inline nil, :meta {:arglists (quote ([node root])), :doc "Accepts two DOM elements; returns true if the supplied node is\n  nested inside the supplied root, false otherwise.", :end-column 15, :end-line 49, :column 7, :line 49, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\mixins.cljs"}, :name om-bootstrap.mixins/in-root?, :variadic false, :file "resources\\public\\js\\om_bootstrap\\mixins.cljs", :end-column 15, :method-params ([node root]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node root])), :doc "Accepts two DOM elements; returns true if the supplied node is\n  nested inside the supplied root, false otherwise.", :test true}, set-timeout-mixin {:doc "Handles a sequence of timeouts for the component, and removes them\n   from the document when the component is unmounted.", :meta {:end-column 28, :end-line 37, :column 11, :line 37, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\mixins.cljs"}, :file "resources\\public\\js\\om_bootstrap\\mixins.cljs", :line 37, :column 1, :end-line 37, :end-column 28, :test true, :name om-bootstrap.mixins/set-timeout-mixin}, set-listener-mixin {:doc "Handles a sequence of listeners for the component, and removes them\n   from the document when the component is unmounted.", :meta {:end-column 29, :end-line 26, :column 11, :line 26, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\mixins.cljs"}, :file "resources\\public\\js\\om_bootstrap\\mixins.cljs", :line 26, :column 1, :end-line 26, :end-column 29, :test true, :name om-bootstrap.mixins/set-listener-mixin}, event-listener {:schema (schema.core/make-fn-schema output-schema17615 [input-schema17616]), :protocol-inline nil, :meta {:arglists (quote ([target event-type callback])), :schema (schema.core/make-fn-schema output-schema17615 [input-schema17616]), :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\mixins.cljs", :line 9, :column 9, :end-line 9, :end-column 23, :doc "Inputs: [target :- s/Any event-type :- s/Str callback :- (s/=> s/Any s/Any)]\n  Returns: (s/=> s/Any)\n\n  Registers the callback on the supplied target for events of type\n   `event-type`. Returns a function of no arguments that, when called,\n   unregisters the callback.", :raw-arglists (quote ([target :- s/Any event-type :- s/Str callback :- (s/=> s/Any s/Any)]))}, :name om-bootstrap.mixins/event-listener, :variadic false, :file "resources\\public\\js\\om_bootstrap\\mixins.cljs", :end-column 23, :method-params ([G__17619 G__17620 G__17621]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([target :- s/Any event-type :- s/Str callback :- (s/=> s/Any s/Any)])), :line 9, :end-line 9, :max-fixed-arity 3, :fn-var true, :arglists (quote ([target event-type callback])), :doc "Inputs: [target :- s/Any event-type :- s/Str callback :- (s/=> s/Any s/Any)]\n  Returns: (s/=> s/Any)\n\n  Registers the callback on the supplied target for events of type\n   `event-type`. Returns a function of no arguments that, when called,\n   unregisters the callback.", :test true}}, :require-macros {s schema.core, schema.core schema.core, om-tools.mixin om-tools.mixin, om.core om.core, om om.core}, :cljs.analyzer/constants {:order [:error :value :schema :type :schema.core/error :else :open? :collapsed?], :seen #{:schema :schema.core/error :else :value :type :open? :error :collapsed?}}, :doc nil}