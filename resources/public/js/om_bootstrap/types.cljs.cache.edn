;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name om-bootstrap.types, :imports nil, :requires {schema.core schema.core, s schema.core}, :uses nil, :defs {BSClass {:meta {:end-column 13, :end-line 68, :column 6, :line 68, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\types.cljs"}, :file "resources\\public\\js\\om_bootstrap\\types.cljs", :line 68, :column 1, :end-line 68, :end-column 13, :test true, :name om-bootstrap.types/BSClass}, class-map {:doc "Map of keyword to the proper bootstrap class name.", :meta {:end-column 15, :end-line 29, :column 6, :line 29, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\types.cljs"}, :file "resources\\public\\js\\om_bootstrap\\types.cljs", :line 29, :column 1, :end-line 29, :end-column 15, :test true, :name om-bootstrap.types/class-map}, separate {:schema (schema.core/make-fn-schema output-schema17437 [input-schema17438 input-schema17443]), :protocol-inline nil, :meta {:schema (schema.core/make-fn-schema output-schema17437 [input-schema17438 input-schema17443]), :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\types.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([G__17441 G__17442] [G__17446 G__17447 G__17448]), :arglists ([G__17441 G__17442] [G__17446 G__17447 G__17448]), :arglists-meta (nil nil)}, :column 9, :raw-arglists (quote ([schema opts] [schema opts defaults])), :line 94, :end-line 94, :arglists (quote ([schema opts] [schema opts defaults])), :doc "Inputs: ([schema opts] [schema opts defaults])\n  Returns: (s/pair {s/Any s/Any} \"om-bootstrap options.\" {s/Any s/Any} \"all other props.\")\n\n  Returns two maps; the first is all of the schema options, the\n  second is the REST of the options."}, :name om-bootstrap.types/separate, :variadic false, :file "resources\\public\\js\\om_bootstrap\\types.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([G__17441 G__17442] [G__17446 G__17447 G__17448]), :arglists ([G__17441 G__17442] [G__17446 G__17447 G__17448]), :arglists-meta (nil nil)}, :method-params ([G__17441 G__17442] [G__17446 G__17447 G__17448]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([schema opts] [schema opts defaults])), :line 94, :end-line 94, :max-fixed-arity 3, :fn-var true, :arglists ([G__17441 G__17442] [G__17446 G__17447 G__17448]), :doc "Inputs: ([schema opts] [schema opts defaults])\n  Returns: (s/pair {s/Any s/Any} \"om-bootstrap options.\" {s/Any s/Any} \"all other props.\")\n\n  Returns two maps; the first is all of the schema options, the\n  second is the REST of the options.", :test true}, bootstrap {:protocol-inline nil, :meta {:arglists (quote ([schema])), :doc "Applies all default bootstrap options to the supplied schema. If\n  the incoming schema has one of the the keys from BootstrapClass,\n  that wins (even if it's required).", :end-column 16, :end-line 77, :column 7, :line 77, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\types.cljs"}, :name om-bootstrap.types/bootstrap, :variadic false, :file "resources\\public\\js\\om_bootstrap\\types.cljs", :end-column 16, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Applies all default bootstrap options to the supplied schema. If\n  the incoming schema has one of the the keys from BootstrapClass,\n  that wins (even if it's required).", :test true}, size-map {:meta {:end-column 14, :end-line 62, :column 6, :line 62, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\types.cljs"}, :file "resources\\public\\js\\om_bootstrap\\types.cljs", :line 62, :column 1, :end-line 62, :end-column 14, :test true, :name om-bootstrap.types/size-map}, BootstrapClass {:meta {:end-column 20, :end-line 72, :column 6, :line 72, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\types.cljs"}, :file "resources\\public\\js\\om_bootstrap\\types.cljs", :line 72, :column 1, :end-line 72, :end-column 20, :test true, :name om-bootstrap.types/BootstrapClass}, Component {:meta {:end-column 15, :end-line 23, :column 6, :line 23, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\types.cljs"}, :file "resources\\public\\js\\om_bootstrap\\types.cljs", :line 23, :column 1, :end-line 23, :end-column 15, :test true, :name om-bootstrap.types/Component}, at-least {:schema (schema.core/make-fn-schema output-schema17422 [input-schema17423]), :protocol-inline nil, :meta {:arglists (quote ([schema])), :schema (schema.core/make-fn-schema output-schema17422 [input-schema17423]), :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\types.cljs", :line 14, :column 9, :end-line 14, :end-column 17, :doc "Inputs: [schema]\n\n  Returns a map schema that accepts the supplied map schema, plus any\n  other optional keys that show up in the map. Such a schema can only\n  enforce that required keys are missing.", :raw-arglists (quote ([schema]))}, :name om-bootstrap.types/at-least, :variadic false, :file "resources\\public\\js\\om_bootstrap\\types.cljs", :end-column 17, :method-params ([G__17426]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([schema])), :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Inputs: [schema]\n\n  Returns a map schema that accepts the supplied map schema, plus any\n  other optional keys that show up in the map. Such a schema can only\n  enforce that required keys are missing.", :test true}, bs-class-set {:schema (schema.core/make-fn-schema output-schema17470 [input-schema17471]), :protocol-inline nil, :meta {:arglists (quote ([{:keys [bs-class bs-style bs-size]}])), :schema (schema.core/make-fn-schema output-schema17470 [input-schema17471]), :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\types.cljs", :line 107, :column 9, :end-line 107, :end-column 21, :doc "Inputs: [{:keys [bs-class bs-style bs-size]} :- (at-least BootstrapClass)]\n  Returns: {s/Str s/Bool}\n\n  Returns input for class-set.", :raw-arglists (quote ([{:keys [bs-class bs-style bs-size]} :- (at-least BootstrapClass)]))}, :name om-bootstrap.types/bs-class-set, :variadic false, :file "resources\\public\\js\\om_bootstrap\\types.cljs", :end-column 21, :method-params ([G__17474]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([{:keys [bs-class bs-style bs-size]} :- (at-least BootstrapClass)])), :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [bs-class bs-style bs-size]}])), :doc "Inputs: [{:keys [bs-class bs-style bs-size]} :- (at-least BootstrapClass)]\n  Returns: {s/Str s/Bool}\n\n  Returns input for class-set.", :test true}, schema-keys {:schema (schema.core/make-fn-schema output-schema17407 [input-schema17408]), :protocol-inline nil, :meta {:arglists (quote ([schema])), :schema (schema.core/make-fn-schema output-schema17407 [input-schema17408]), :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\types.cljs", :line 7, :column 9, :end-line 7, :end-column 20, :doc "Inputs: [schema :- {s/Any s/Any}]\n\n  Returns all keys from a schema.", :raw-arglists (quote ([schema :- {s/Any s/Any}]))}, :name om-bootstrap.types/schema-keys, :variadic false, :file "resources\\public\\js\\om_bootstrap\\types.cljs", :end-column 20, :method-params ([G__17411]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([schema :- {s/Any s/Any}])), :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Inputs: [schema :- {s/Any s/Any}]\n\n  Returns all keys from a schema.", :test true}, BSSize {:meta {:end-column 12, :end-line 70, :column 6, :line 70, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\types.cljs"}, :file "resources\\public\\js\\om_bootstrap\\types.cljs", :line 70, :column 1, :end-line 70, :end-column 12, :test true, :name om-bootstrap.types/BSSize}, BSStyle {:meta {:end-column 13, :end-line 69, :column 6, :line 69, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\types.cljs"}, :file "resources\\public\\js\\om_bootstrap\\types.cljs", :line 69, :column 1, :end-line 69, :end-column 13, :test true, :name om-bootstrap.types/BSStyle}, Renderable {:meta {:end-column 16, :end-line 26, :column 6, :line 26, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\types.cljs"}, :file "resources\\public\\js\\om_bootstrap\\types.cljs", :line 26, :column 1, :end-line 26, :end-column 16, :test true, :name om-bootstrap.types/Renderable}, style-map {:doc "Map of style keywords -> styles.", :meta {:end-column 15, :end-line 49, :column 6, :line 49, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\om_bootstrap\\types.cljs"}, :file "resources\\public\\js\\om_bootstrap\\types.cljs", :line 49, :column 1, :end-line 49, :end-column 15, :test true, :name om-bootstrap.types/style-map}}, :require-macros {schema.core schema.core, s schema.core}, :cljs.analyzer/constants {:order [:error :value :schema :type :schema.core/error :k :bs-class :bs-style :bs-size], :seen #{:schema :schema.core/error :value :type :k :bs-size :error :bs-style :bs-class}}, :doc "Types for working with Bootstrap."}