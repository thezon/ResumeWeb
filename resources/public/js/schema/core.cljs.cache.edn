;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{Symbol defn defmethod letfn Keyword defrecord}, :name schema.core, :imports nil, :requires {utils schema.utils, schema.utils schema.utils, clojure.string clojure.string, str clojure.string}, :uses nil, :defs {->Predicate {:protocol-inline nil, :meta {:arglists (quote ([p? pred-name])), :factory :positional, :internal-ctor true, :end-column 34, :end-line 297, :column 25, :line 297, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/->Predicate, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 34, :method-params ([p? pred-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 297, :end-line 297, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p? pred-name])), :test true}, ConditionalSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/ConditionalSchema, :file "resources\\public\\js\\schema\\core.cljs", :end-column 42, :type true, :column 25, :internal-ctor true, :line 508, :record true, :end-line 508, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, arity {:protocol-inline nil, :meta {:arglists (quote ([input-schema])), :private true, :end-column 26, :end-line 923, :column 21, :line 923, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :private true, :name schema.core/arity, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 26, :method-params ([input-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 923, :end-line 923, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input-schema])), :test true}, map->FnSchema {:protocol-inline nil, :meta {:arglists (quote ([G__21140])), :factory :map, :internal-ctor true, :end-column 33, :end-line 911, :column 25, :line 911, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map->FnSchema, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 33, :method-params ([G__21140]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 911, :end-line 911, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__21140])), :test true}, ->One {:protocol-inline nil, :meta {:arglists (quote ([schema optional? name])), :factory :positional, :internal-ctor true, :end-column 28, :end-line 784, :column 25, :line 784, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/->One, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 28, :method-params ([schema optional? name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 784, :end-line 784, :max-fixed-arity 3, :fn-var true, :arglists (quote ([schema optional? name])), :test true}, named {:protocol-inline nil, :meta {:arglists (quote ([schema name])), :doc "A value that must satisfy schema, and has a name for documentation purposes.", :end-column 25, :end-line 451, :column 20, :line 451, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/named, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 25, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 451, :end-line 451, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :doc "A value that must satisfy schema, and has a name for documentation purposes.", :test true}, optional-key {:protocol-inline nil, :meta {:arglists (quote ([k])), :doc "An optional key in a map", :end-column 32, :end-line 617, :column 20, :line 617, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/optional-key, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 32, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 617, :end-line 617, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "An optional key in a map", :test true}, Protocol {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Protocol, :file "resources\\public\\js\\schema\\core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 328, :record true, :end-line 328, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->AnythingSchema {:protocol-inline nil, :meta {:arglists (quote ([G__20895])), :factory :map, :internal-ctor true, :end-column 39, :end-line 229, :column 25, :line 229, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map->AnythingSchema, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 39, :method-params ([G__20895]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 229, :end-line 229, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20895])), :test true}, map-explain {:protocol-inline nil, :meta {:arglists (quote ([this])), :private true, :end-column 32, :end-line 741, :column 21, :line 741, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :private true, :name schema.core/map-explain, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 32, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 741, :end-line 741, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, Maybe {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Maybe, :file "resources\\public\\js\\schema\\core.cljs", :end-column 30, :type true, :column 25, :internal-ctor true, :line 427, :record true, :end-line 427, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, MapEntry {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/MapEntry, :file "resources\\public\\js\\schema\\core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 647, :record true, :end-line 647, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, One {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/One, :file "resources\\public\\js\\schema\\core.cljs", :end-column 28, :type true, :column 25, :internal-ctor true, :line 784, :record true, :end-line 784, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->Isa {:protocol-inline nil, :meta {:arglists (quote ([h parent])), :factory :positional, :internal-ctor true, :end-column 28, :end-line 259, :column 25, :line 259, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/->Isa, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 28, :method-params ([h parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 259, :end-line 259, :max-fixed-arity 2, :fn-var true, :arglists (quote ([h parent])), :test true}, map->ConditionalSchema {:protocol-inline nil, :meta {:arglists (quote ([G__20989])), :factory :map, :internal-ctor true, :end-column 42, :end-line 508, :column 25, :line 508, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map->ConditionalSchema, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 42, :method-params ([G__20989]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 508, :end-line 508, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20989])), :test true}, NamedSchema {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/NamedSchema, :file "resources\\public\\js\\schema\\core.cljs", :end-column 36, :type true, :column 25, :internal-ctor true, :line 444, :record true, :end-line 444, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->MapEntry {:protocol-inline nil, :meta {:arglists (quote ([G__21030])), :factory :map, :internal-ctor true, :end-column 33, :end-line 647, :column 25, :line 647, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map->MapEntry, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 33, :method-params ([G__21030]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 647, :end-line 647, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__21030])), :test true}, required-key? {:protocol-inline nil, :meta {:arglists (quote ([ks])), :end-column 33, :end-line 611, :column 20, :line 611, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/required-key?, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 33, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 611, :end-line 611, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks])), :test true}, ->t20949 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([meta20950])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{schema.core/Schema cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{schema.core/Schema cljs.core/IMeta cljs.core/IWithMeta}, :name schema.core/->t20949, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :method-params ([meta20950]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 10, :factory :positional, :line 404, :max-fixed-arity 1, :fn-var true, :arglists (quote ([meta20950])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->Both {:protocol-inline nil, :meta {:arglists (quote ([schemas])), :factory :positional, :internal-ctor true, :end-column 29, :end-line 483, :column 25, :line 483, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/->Both, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 29, :method-params ([schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 483, :end-line 483, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schemas])), :test true}, schema-with-name {:protocol-inline nil, :meta {:arglists (quote ([schema name])), :end-column 36, :end-line 962, :column 20, :line 962, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/schema-with-name, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 36, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 962, :end-line 962, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :test true}, Symbol {:doc "A symbol", :meta {:end-column 12, :end-line 397, :column 6, :line 397, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :file "resources\\public\\js\\schema\\core.cljs", :line 397, :column 1, :end-line 397, :end-column 12, :test true, :name schema.core/Symbol}, Either {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Either, :file "resources\\public\\js\\schema\\core.cljs", :end-column 31, :type true, :column 25, :internal-ctor true, :line 459, :record true, :end-line 459, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->One {:protocol-inline nil, :meta {:arglists (quote ([G__21088])), :factory :map, :internal-ctor true, :end-column 28, :end-line 784, :column 25, :line 784, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map->One, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 28, :method-params ([G__21088]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 784, :end-line 784, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__21088])), :test true}, fn-schema {:protocol-inline nil, :meta {:arglists (quote ([f])), :doc "Produce the schema for a function defined with s/fn or s/defn.", :tag FnSchema, :end-column 39, :end-line 1070, :column 30, :line 1070, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/fn-schema, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 39, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1070, :ret-tag FnSchema, :end-line 1070, :max-fixed-arity 1, :tag FnSchema, :fn-var true, :arglists (quote ([f])), :doc "Produce the schema for a function defined with s/fn or s/defn.", :test true}, conditional {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(preds-and-schemas)], :arglists [[& preds-and-schemas]], :arglists-meta (nil)}, :arglists (quote ([& preds-and-schemas])), :doc "Define a conditional schema.  Takes args like cond,\n   (conditional pred1 schema1 pred2 schema2 ...),\n   and checks the first schema where pred is true on the value.\n   Unlike cond, throws if the value does not match any condition.\n   :else may be used as a final condition in the place of (constantly true).\n   More efficient than either, since only one schema must be checked.", :end-column 31, :end-line 522, :column 20, :line 522, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/conditional, :variadic true, :file "resources\\public\\js\\schema\\core.cljs", :end-column 31, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(preds-and-schemas)], :arglists [[& preds-and-schemas]], :arglists-meta (nil)}, :method-params [(preds-and-schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 522, :end-line 522, :max-fixed-arity 0, :fn-var true, :arglists [[& preds-and-schemas]], :doc "Define a conditional schema.  Takes args like cond,\n   (conditional pred1 schema1 pred2 schema2 ...),\n   and checks the first schema where pred is true on the value.\n   Unlike cond, throws if the value does not match any condition.\n   :else may be used as a final condition in the place of (constantly true).\n   More efficient than either, since only one schema must be checked.", :test true}, either {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists [[& schemas]], :arglists-meta (nil)}, :arglists (quote ([& schemas])), :doc "A value that must satisfy at least one schema in schemas.", :end-column 26, :end-line 475, :column 20, :line 475, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/either, :variadic true, :file "resources\\public\\js\\schema\\core.cljs", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists [[& schemas]], :arglists-meta (nil)}, :method-params [(schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 475, :end-line 475, :max-fixed-arity 0, :fn-var true, :arglists [[& schemas]], :doc "A value that must satisfy at least one schema in schemas.", :test true}, explicit-schema-key {:protocol-inline nil, :meta {:arglists (quote ([ks])), :end-column 39, :end-line 626, :column 20, :line 626, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/explicit-schema-key, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 39, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 626, :end-line 626, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks])), :test true}, schema-name {:protocol-inline nil, :meta {:arglists (quote ([schema])), :end-column 31, :end-line 966, :column 20, :line 966, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/schema-name, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 31, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 966, :end-line 966, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :test true}, Bool {:doc "Boolean true or false", :meta {:end-column 10, :end-line 381, :column 6, :line 381, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :file "resources\\public\\js\\schema\\core.cljs", :line 381, :column 1, :end-line 381, :end-column 10, :test true, :name schema.core/Bool}, ->EqSchema {:protocol-inline nil, :meta {:arglists (quote ([v])), :factory :positional, :internal-ctor true, :end-column 33, :end-line 243, :column 25, :line 243, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/->EqSchema, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 33, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 243, :end-line 243, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :test true}, enum {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(vs)], :arglists [[& vs]], :arglists-meta (nil)}, :arglists (quote ([& vs])), :doc "A value that must be = to some element of vs.", :end-column 24, :end-line 289, :column 20, :line 289, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/enum, :variadic true, :file "resources\\public\\js\\schema\\core.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(vs)], :arglists [[& vs]], :arglists-meta (nil)}, :method-params [(vs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 289, :end-line 289, :max-fixed-arity 0, :fn-var true, :arglists [[& vs]], :doc "A value that must be = to some element of vs.", :test true}, one {:protocol-inline nil, :meta {:arglists (quote ([schema name])), :doc "A single required element of a sequence (not repeated, the implicit default)", :end-column 23, :end-line 786, :column 20, :line 786, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/one, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 23, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 786, :end-line 786, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :doc "A single required element of a sequence (not repeated, the implicit default)", :test true}, find-extra-keys-schema {:protocol-inline nil, :meta {:arglists (quote ([map-schema])), :end-column 42, :end-line 692, :column 20, :line 692, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/find-extra-keys-schema, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 42, :method-params ([map-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 692, :end-line 692, :max-fixed-arity 1, :fn-var true, :arglists (quote ([map-schema])), :test true}, map->Predicate {:protocol-inline nil, :meta {:arglists (quote ([G__20931])), :factory :map, :internal-ctor true, :end-column 34, :end-line 297, :column 25, :line 297, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map->Predicate, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 34, :method-params ([G__20931]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 297, :end-line 297, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20931])), :test true}, map->RequiredKey {:protocol-inline nil, :meta {:arglists (quote ([G__21014])), :factory :map, :internal-ctor true, :end-column 36, :end-line 602, :column 25, :line 602, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map->RequiredKey, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 36, :method-params ([G__21014]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 602, :end-line 602, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__21014])), :test true}, Record {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Record, :file "resources\\public\\js\\schema\\core.cljs", :end-column 31, :type true, :column 25, :internal-ctor true, :line 869, :record true, :end-line 869, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, parse-sequence-schema {:protocol-inline nil, :meta {:arglists (quote ([s])), :end-column 41, :end-line 796, :column 20, :line 796, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/parse-sequence-schema, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 41, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 796, :end-line 796, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :test true}, OptionalKey {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/OptionalKey, :file "resources\\public\\js\\schema\\core.cljs", :end-column 36, :type true, :column 25, :internal-ctor true, :line 615, :record true, :end-line 615, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Record {:protocol-inline nil, :meta {:arglists (quote ([G__21128])), :factory :map, :internal-ctor true, :end-column 31, :end-line 869, :column 25, :line 869, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map->Record, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 31, :method-params ([G__21128]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 869, :end-line 869, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__21128])), :test true}, EqSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/EqSchema, :file "resources\\public\\js\\schema\\core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 243, :record true, :end-line 243, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, explain {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc "Expand this schema to a human-readable format suitable for pprinting,\n     also expanding class schematas at the leaves.  Example:\n\n     user> (s/explain {:a s/Keyword :b [s/Int]} )\n     {:a Keyword, :b [Int]}", :protocol schema.core/Schema, :end-column 11, :end-line 107, :column 4, :line 107, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :protocol schema.core/Schema, :name schema.core/explain, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Expand this schema to a human-readable format suitable for pprinting,\n     also expanding class schematas at the leaves.  Example:\n\n     user> (s/explain {:a s/Keyword :b [s/Int]} )\n     {:a Keyword, :b [Int]}", :test true}, ->RequiredKey {:protocol-inline nil, :meta {:arglists (quote ([k])), :factory :positional, :internal-ctor true, :end-column 36, :end-line 602, :column 25, :line 602, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/->RequiredKey, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 36, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 602, :end-line 602, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :test true}, subschema-walker {:protocol-inline nil, :meta {:dynamic true, :end-column 32, :end-line 122, :column 16, :line 122, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/subschema-walker, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 32, :method-params ([s]), :protocol-impl nil, :arglists-meta (), :column 1, :dynamic true, :line 122, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists nil, :doc "The function to call within 'walker' implementations to create walkers for subschemas.\n   Can be dynamically bound (using start-walker below) to create different walking behaviors.\n\n   For the curious, implemented using dynamic binding rather than making walker take a\n   subschema-walker as an argument because some behaviors (e.g. recursive schema walkers)\n   seem to require mind-bending things like fixed-point combinators that way, but are\n   simple this way.", :test true}, map->Protocol {:protocol-inline nil, :meta {:arglists (quote ([G__20943])), :factory :map, :internal-ctor true, :end-column 33, :end-line 328, :column 25, :line 328, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map->Protocol, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 33, :method-params ([G__20943]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 328, :end-line 328, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20943])), :test true}, preserve-map-type {:protocol-inline nil, :meta {:arglists (quote ([original walker-result])), :private true, :end-column 38, :end-line 699, :column 21, :line 699, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :private true, :name schema.core/preserve-map-type, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 38, :method-params ([original walker-result]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 699, :end-line 699, :max-fixed-arity 2, :fn-var true, :arglists (quote ([original walker-result])), :test true}, fn-validation? {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "Get the current global schema validation setting.", :end-column 34, :end-line 1033, :column 20, :line 1033, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/fn-validation?, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 34, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1033, :end-line 1033, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Get the current global schema validation setting.", :test true}, isa {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([parent] [h parent]), :arglists ([parent] [h parent]), :arglists-meta (nil nil)}, :arglists (quote ([parent] [h parent])), :doc "A value that must be a child of parent.", :end-column 23, :end-line 270, :column 20, :line 270, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/isa, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([parent] [h parent]), :arglists ([parent] [h parent]), :arglists-meta (nil nil)}, :method-params ([parent] [h parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 2, :fn-var true, :arglists ([parent] [h parent]), :doc "A value that must be a child of parent.", :test true}, Num {:doc "Any number", :meta {:end-column 9, :end-line 385, :column 6, :line 385, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :file "resources\\public\\js\\schema\\core.cljs", :line 385, :column 1, :end-line 385, :end-column 9, :test true, :name schema.core/Num}, eq {:protocol-inline nil, :meta {:arglists (quote ([v])), :doc "A value that must be (= v).", :end-column 22, :end-line 252, :column 20, :line 252, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/eq, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 22, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "A value that must be (= v).", :test true}, validate {:protocol-inline nil, :meta {:arglists (quote ([schema value])), :doc "Throw an exception if value does not satisfy schema; otherwise, return value.", :end-column 28, :end-line 157, :column 20, :line 157, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/validate, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 28, :method-params ([schema value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema value])), :doc "Throw an exception if value does not satisfy schema; otherwise, return value.", :test true}, pred {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p?] [p? pred-name]), :arglists ([p?] [p? pred-name]), :arglists-meta (nil nil)}, :arglists (quote ([p?] [p? pred-name])), :doc "A value for which p? returns true (and does not throw).\n   Optional pred-name can be passed for nicer validation errors.", :end-column 24, :end-line 311, :column 20, :line 311, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/pred, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p?] [p? pred-name]), :arglists ([p?] [p? pred-name]), :arglists-meta (nil nil)}, :method-params ([p?] [p? pred-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 311, :end-line 311, :max-fixed-arity 2, :fn-var true, :arglists ([p?] [p? pred-name]), :doc "A value for which p? returns true (and does not throw).\n   Optional pred-name can be passed for nicer validation errors.", :test true}, AnythingSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/AnythingSchema, :file "resources\\public\\js\\schema\\core.cljs", :end-column 39, :type true, :column 25, :internal-ctor true, :line 229, :record true, :end-line 229, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, Any {:doc "Any value, including nil.", :meta {:end-column 9, :end-line 237, :column 6, :line 237, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :file "resources\\public\\js\\schema\\core.cljs", :line 237, :column 1, :end-line 237, :end-column 9, :test true, :name schema.core/Any}, Regex {:doc "A regular expression", :meta {:end-column 11, :end-line 401, :column 6, :line 401, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :file "resources\\public\\js\\schema\\core.cljs", :line 401, :column 1, :end-line 401, :end-column 11, :test true, :name schema.core/Regex}, ->EnumSchema {:protocol-inline nil, :meta {:arglists (quote ([vs])), :factory :positional, :internal-ctor true, :end-column 35, :end-line 280, :column 25, :line 280, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/->EnumSchema, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 35, :method-params ([vs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 280, :end-line 280, :max-fixed-arity 1, :fn-var true, :arglists (quote ([vs])), :test true}, RequiredKey {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/RequiredKey, :file "resources\\public\\js\\schema\\core.cljs", :end-column 36, :type true, :column 25, :internal-ctor true, :line 602, :record true, :end-line 602, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, explain-kspec {:protocol-inline nil, :meta {:arglists (quote ([kspec])), :private true, :end-column 34, :end-line 636, :column 21, :line 636, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :private true, :name schema.core/explain-kspec, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 34, :method-params ([kspec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 636, :end-line 636, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kspec])), :test true}, Inst {:doc "The local representation of #inst ...", :meta {:end-column 10, :end-line 412, :column 6, :line 412, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :file "resources\\public\\js\\schema\\core.cljs", :line 412, :column 1, :end-line 412, :end-column 10, :test true, :name schema.core/Inst}, map->OptionalKey {:protocol-inline nil, :meta {:arglists (quote ([G__21022])), :factory :map, :internal-ctor true, :end-column 36, :end-line 615, :column 25, :line 615, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map->OptionalKey, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 36, :method-params ([G__21022]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 615, :end-line 615, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__21022])), :test true}, FnSchema {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/FnSchema, :file "resources\\public\\js\\schema\\core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 911, :record true, :end-line 911, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, if {:protocol-inline nil, :meta {:arglists (quote ([pred if-schema else-schema])), :doc "if the predicate returns truthy, use the if-schema, otherwise use the else-schema", :end-column 22, :end-line 535, :column 20, :line 535, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/if, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 22, :method-params ([pred if-schema else-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 535, :end-line 535, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pred if-schema else-schema])), :doc "if the predicate returns truthy, use the if-schema, otherwise use the else-schema", :test true}, Predicate {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Predicate, :file "resources\\public\\js\\schema\\core.cljs", :end-column 34, :type true, :column 25, :internal-ctor true, :line 297, :record true, :end-line 297, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, make-fn-schema {:protocol-inline nil, :meta {:arglists (quote ([output-schema input-schemas])), :doc "A function outputting a value in output schema, whose argument vector must match one of\n   input-schemas, each of which should be a sequence schema.\n   Currently function schemas are purely descriptive; they validate against any function,\n   regardless of actual input and output types.", :end-column 34, :end-line 930, :column 20, :line 930, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/make-fn-schema, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 34, :method-params ([output-schema input-schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 930, :end-line 930, :max-fixed-arity 2, :fn-var true, :arglists (quote ([output-schema input-schemas])), :doc "A function outputting a value in output schema, whose argument vector must match one of\n   input-schemas, each of which should be a sequence schema.\n   Currently function schemas are purely descriptive; they validate against any function,\n   regardless of actual input and output types.", :test true}, map-walker {:protocol-inline nil, :meta {:arglists (quote ([map-schema])), :private true, :end-column 31, :end-line 704, :column 21, :line 704, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :private true, :name schema.core/map-walker, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 31, :method-params ([map-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 704, :end-line 704, :max-fixed-arity 1, :fn-var true, :arglists (quote ([map-schema])), :test true}, Str {:doc "Satisfied only by String.\n   Is (pred string?) and not js/String in cljs because of keywords.", :meta {:end-column 9, :end-line 376, :column 6, :line 376, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :file "resources\\public\\js\\schema\\core.cljs", :line 376, :column 1, :end-line 376, :end-column 9, :test true, :name schema.core/Str}, map->EqSchema {:protocol-inline nil, :meta {:arglists (quote ([G__20903])), :factory :map, :internal-ctor true, :end-column 33, :end-line 243, :column 25, :line 243, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map->EqSchema, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 33, :method-params ([G__20903]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 243, :end-line 243, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20903])), :test true}, ->AnythingSchema {:protocol-inline nil, :meta {:arglists (quote ([_])), :factory :positional, :internal-ctor true, :end-column 39, :end-line 229, :column 25, :line 229, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/->AnythingSchema, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 39, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 229, :end-line 229, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :test true}, maybe {:protocol-inline nil, :meta {:arglists (quote ([schema])), :doc "A value that must either be nil or satisfy schema", :end-column 25, :end-line 436, :column 20, :line 436, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/maybe, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 25, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 436, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "A value that must either be nil or satisfy schema", :test true}, check {:protocol-inline nil, :meta {:arglists (quote ([schema x])), :doc "Return nil if x matches schema; otherwise, returns a value that looks like the\n   'bad' parts of x with ValidationErrors at the leaves describing the failures.", :end-column 25, :end-line 151, :column 20, :line 151, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/check, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 25, :method-params ([schema x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema x])), :doc "Return nil if x matches schema; otherwise, returns a value that looks like the\n   'bad' parts of x with ValidationErrors at the leaves describing the failures.", :test true}, pair {:protocol-inline nil, :meta {:arglists (quote ([first-schema first-name second-schema second-name])), :doc "A schema for a pair of schemas and their names", :end-column 24, :end-line 855, :column 20, :line 855, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/pair, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 24, :method-params ([first-schema first-name second-schema second-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 855, :end-line 855, :max-fixed-arity 4, :fn-var true, :arglists (quote ([first-schema first-name second-schema second-name])), :doc "A schema for a pair of schemas and their names", :test true}, set-fn-validation! {:protocol-inline nil, :meta {:arglists (quote ([on?])), :doc "Globally turn on schema validation for all s/fn and s/defn instances.", :end-column 38, :end-line 1038, :column 20, :line 1038, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/set-fn-validation!, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 38, :method-params ([on?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1038, :end-line 1038, :max-fixed-arity 1, :fn-var true, :arglists (quote ([on?])), :doc "Globally turn on schema validation for all s/fn and s/defn instances.", :test true}, EnumSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/EnumSchema, :file "resources\\public\\js\\schema\\core.cljs", :end-column 35, :type true, :column 25, :internal-ctor true, :line 280, :record true, :end-line 280, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->OptionalKey {:protocol-inline nil, :meta {:arglists (quote ([k])), :factory :positional, :internal-ctor true, :end-column 36, :end-line 615, :column 25, :line 615, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/->OptionalKey, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 36, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 615, :end-line 615, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :test true}, ->ConditionalSchema {:protocol-inline nil, :meta {:arglists (quote ([preds-and-schemas])), :factory :positional, :internal-ctor true, :end-column 42, :end-line 508, :column 25, :line 508, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/->ConditionalSchema, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 42, :method-params ([preds-and-schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 508, :end-line 508, :max-fixed-arity 1, :fn-var true, :arglists (quote ([preds-and-schemas])), :test true}, ->NamedSchema {:protocol-inline nil, :meta {:arglists (quote ([schema name])), :factory :positional, :internal-ctor true, :end-column 36, :end-line 444, :column 25, :line 444, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/->NamedSchema, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 36, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 444, :end-line 444, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :test true}, schematize-fn {:protocol-inline nil, :meta {:arglists (quote ([f schema])), :doc "Attach the schema to fn f at runtime, extractable by fn-schema.", :end-column 33, :end-line 1065, :column 20, :line 1065, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/schematize-fn, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 33, :method-params ([f schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1065, :end-line 1065, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f schema])), :doc "Attach the schema to fn f at runtime, extractable by fn-schema.", :test true}, Uuid {:doc "The local representation of #uuid ...", :meta {:end-column 10, :end-line 416, :column 6, :line 416, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :file "resources\\public\\js\\schema\\core.cljs", :line 416, :column 1, :end-line 416, :end-column 10, :test true, :name schema.core/Uuid}, map->Isa {:protocol-inline nil, :meta {:arglists (quote ([G__20911])), :factory :map, :internal-ctor true, :end-column 28, :end-line 259, :column 25, :line 259, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map->Isa, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 28, :method-params ([G__20911]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 259, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20911])), :test true}, map->Either {:protocol-inline nil, :meta {:arglists (quote ([G__20970])), :factory :map, :internal-ctor true, :end-column 31, :end-line 459, :column 25, :line 459, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map->Either, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 31, :method-params ([G__20970]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 459, :end-line 459, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20970])), :test true}, t20949 {:num-fields 1, :protocols #{schema.core/Schema cljs.core/IMeta cljs.core/IWithMeta}, :name schema.core/t20949, :file "resources\\public\\js\\schema\\core.cljs", :type true, :anonymous true, :column 10, :line 404, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->Record {:protocol-inline nil, :meta {:arglists (quote ([klass schema])), :factory :positional, :internal-ctor true, :end-column 31, :end-line 869, :column 25, :line 869, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/->Record, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 31, :method-params ([klass schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 869, :end-line 869, :max-fixed-arity 2, :fn-var true, :arglists (quote ([klass schema])), :test true}, protocol-name {:protocol-inline nil, :meta {:arglists (quote ([protocol])), :end-column 33, :end-line 323, :column 20, :line 323, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/protocol-name, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 33, :method-params ([protocol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 1, :fn-var true, :arglists (quote ([protocol])), :test true}, Isa {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Isa, :file "resources\\public\\js\\schema\\core.cljs", :end-column 28, :type true, :column 25, :internal-ctor true, :line 259, :record true, :end-line 259, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, +missing+ {:no-doc true, :meta {:no-doc true, :end-column 24, :end-line 598, :column 15, :line 598, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/+missing+, :file "resources\\public\\js\\schema\\core.cljs", :end-column 24, :column 1, :line 598, :end-line 598, :doc "A sentinel value representing missing portions of the input data.", :test true}, ->Either {:protocol-inline nil, :meta {:arglists (quote ([schemas])), :factory :positional, :internal-ctor true, :end-column 31, :end-line 459, :column 25, :line 459, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/->Either, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 31, :method-params ([schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 459, :end-line 459, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schemas])), :test true}, map->NamedSchema {:protocol-inline nil, :meta {:arglists (quote ([G__20962])), :factory :map, :internal-ctor true, :end-column 36, :end-line 444, :column 25, :line 444, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map->NamedSchema, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 36, :method-params ([G__20962]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 444, :end-line 444, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20962])), :test true}, start-walker {:protocol-inline nil, :meta {:arglists (quote ([sub-walker schema])), :doc "The entry point for creating walkers.  Binds the provided walker to subschema-walker,\n   then calls it on the provided schema.  For simple validation, pass walker as sub-walker.\n   More sophisticated behavior (coercion, etc), can be achieved by passing a sub-walker\n   that wraps walker with additional behavior.", :end-column 32, :end-line 136, :column 20, :line 136, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/start-walker, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 32, :method-params ([sub-walker schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sub-walker schema])), :doc "The entry point for creating walkers.  Binds the provided walker to subschema-walker,\n   then calls it on the provided schema.  For simple validation, pass walker as sub-walker.\n   More sophisticated behavior (coercion, etc), can be achieved by passing a sub-walker\n   that wraps walker with additional behavior.", :test true}, checker {:protocol-inline nil, :meta {:arglists (quote ([schema])), :doc "Compile an efficient checker for schema, which returns nil for valid values and\n   error descriptions otherwise.", :end-column 27, :end-line 145, :column 20, :line 145, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/checker, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 27, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Compile an efficient checker for schema, which returns nil for valid values and\n   error descriptions otherwise.", :test true}, Keyword {:doc "A keyword", :meta {:end-column 13, :end-line 393, :column 6, :line 393, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :file "resources\\public\\js\\schema\\core.cljs", :line 393, :column 1, :end-line 393, :end-column 13, :test true, :name schema.core/Keyword}, ->MapEntry {:protocol-inline nil, :meta {:arglists (quote ([kspec val-schema])), :factory :positional, :internal-ctor true, :end-column 33, :end-line 647, :column 25, :line 647, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/->MapEntry, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 33, :method-params ([kspec val-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 647, :end-line 647, :max-fixed-arity 2, :fn-var true, :arglists (quote ([kspec val-schema])), :test true}, ->Protocol {:protocol-inline nil, :meta {:arglists (quote ([p])), :factory :positional, :internal-ctor true, :end-column 33, :end-line 328, :column 25, :line 328, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/->Protocol, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 33, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 328, :end-line 328, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :test true}, ->Maybe {:protocol-inline nil, :meta {:arglists (quote ([schema])), :factory :positional, :internal-ctor true, :end-column 30, :end-line 427, :column 25, :line 427, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/->Maybe, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 30, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 427, :end-line 427, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :test true}, explain-input-schema {:protocol-inline nil, :meta {:arglists (quote ([input-schema])), :end-column 40, :end-line 905, :column 20, :line 905, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/explain-input-schema, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 40, :method-params ([input-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 905, :end-line 905, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input-schema])), :test true}, record {:protocol-inline nil, :meta {:arglists (quote ([klass schema])), :doc "A Record instance of type klass, whose elements match map schema 'schema'.", :end-column 26, :end-line 888, :column 20, :line 888, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/record, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 26, :method-params ([klass schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 888, :end-line 888, :max-fixed-arity 2, :fn-var true, :arglists (quote ([klass schema])), :doc "A Record instance of type klass, whose elements match map schema 'schema'.", :test true}, optional-key? {:protocol-inline nil, :meta {:arglists (quote ([ks])), :end-column 33, :end-line 622, :column 20, :line 622, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/optional-key?, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 33, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 622, :end-line 622, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks])), :test true}, map->Both {:protocol-inline nil, :meta {:arglists (quote ([G__20980])), :factory :map, :internal-ctor true, :end-column 29, :end-line 483, :column 25, :line 483, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map->Both, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 29, :method-params ([G__20980]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 483, :end-line 483, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20980])), :test true}, required-key {:protocol-inline nil, :meta {:arglists (quote ([k])), :doc "A required key in a map", :end-column 32, :end-line 604, :column 20, :line 604, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/required-key, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 32, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 604, :end-line 604, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "A required key in a map", :test true}, optional {:protocol-inline nil, :meta {:arglists (quote ([schema name])), :doc "A single optional element of a sequence (not repeated, the implicit default)", :end-column 28, :end-line 791, :column 20, :line 791, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/optional, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 28, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 791, :end-line 791, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :doc "A single optional element of a sequence (not repeated, the implicit default)", :test true}, Int {:doc "Any integral number", :meta {:end-column 9, :end-line 389, :column 6, :line 389, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :file "resources\\public\\js\\schema\\core.cljs", :line 389, :column 1, :end-line 389, :end-column 9, :test true, :name schema.core/Int}, ->FnSchema {:protocol-inline nil, :meta {:arglists (quote ([output-schema input-schemas])), :factory :positional, :internal-ctor true, :end-column 33, :end-line 911, :column 25, :line 911, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/->FnSchema, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 33, :method-params ([output-schema input-schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 911, :end-line 911, :max-fixed-arity 2, :fn-var true, :arglists (quote ([output-schema input-schemas])), :test true}, Schema {:meta {:protocol-info {:methods {walker [[this]], explain [[this]]}}, :protocol-symbol true, :doc nil, :end-column 20, :end-line 90, :column 14, :line 90, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :protocol-symbol true, :name schema.core/Schema, :file "resources\\public\\js\\schema\\core.cljs", :end-column 20, :column 1, :line 90, :protocol-info {:methods {walker [[this]], explain [[this]]}}, :info nil, :end-line 90, :impls #{schema.core/Isa cljs/core.PersistentHashMap js/RegExp cljs/core.PersistentArrayMap schema.core/NamedSchema cljs/core.PersistentVector schema.core/Either schema.core/Both cljs/core.PersistentHashSet schema.core/ConditionalSchema schema.core/Record schema.core/EqSchema schema.core/MapEntry function schema.core/Maybe schema.core/AnythingSchema schema.core/FnSchema schema.core/Predicate schema.core/EnumSchema schema.core/Protocol schema.core/t20949}, :doc nil, :test true}, Both {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Both, :file "resources\\public\\js\\schema\\core.cljs", :end-column 29, :type true, :column 25, :internal-ctor true, :line 483, :record true, :end-line 483, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Maybe {:protocol-inline nil, :meta {:arglists (quote ([G__20954])), :factory :map, :internal-ctor true, :end-column 30, :end-line 427, :column 25, :line 427, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map->Maybe, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 30, :method-params ([G__20954]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 427, :end-line 427, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20954])), :test true}, map-entry {:protocol-inline nil, :meta {:arglists (quote ([kspec val-schema])), :end-column 29, :end-line 686, :column 20, :line 686, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map-entry, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 29, :method-params ([kspec val-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 686, :end-line 686, :max-fixed-arity 2, :fn-var true, :arglists (quote ([kspec val-schema])), :test true}, walker {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc "Produce a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     If this is a composite schema, should let-bind (subschema-walker sub-schema) for each\n     subschema outside the returned fn.  Within the returned fn, should break down data\n     into constituents, call the let-bound subschema walkers on each component, and then\n     reassemble the components into a walked version of the data (or an ErrorContainer\n     describing the validaiton failures).\n\n     Attempting to walk a value that already contains a utils/ErrorContainer produces undefined\n     behavior.\n\n     User code should never call `walker` directly.  Instead, it should call `start-walker`\n     below.", :protocol schema.core/Schema, :end-column 10, :end-line 91, :column 4, :line 91, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :protocol schema.core/Schema, :name schema.core/walker, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Produce a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     If this is a composite schema, should let-bind (subschema-walker sub-schema) for each\n     subschema outside the returned fn.  Within the returned fn, should break down data\n     into constituents, call the let-bound subschema walkers on each component, and then\n     reassemble the components into a walked version of the data (or an ErrorContainer\n     describing the validaiton failures).\n\n     Attempting to walk a value that already contains a utils/ErrorContainer produces undefined\n     behavior.\n\n     User code should never call `walker` directly.  Instead, it should call `start-walker`\n     below.", :test true}, specific-key? {:protocol-inline nil, :meta {:arglists (quote ([ks])), :end-column 33, :end-line 632, :column 20, :line 632, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/specific-key?, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 33, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 632, :end-line 632, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks])), :test true}, map->EnumSchema {:protocol-inline nil, :meta {:arglists (quote ([G__20922])), :factory :map, :internal-ctor true, :end-column 35, :end-line 280, :column 25, :line 280, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/map->EnumSchema, :variadic false, :file "resources\\public\\js\\schema\\core.cljs", :end-column 35, :method-params ([G__20922]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 280, :end-line 280, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__20922])), :test true}, both {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists [[& schemas]], :arglists-meta (nil)}, :arglists (quote ([& schemas])), :doc "A value that must satisfy every schema in schemas.", :end-column 24, :end-line 500, :column 20, :line 500, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\schema\\core.cljs"}, :name schema.core/both, :variadic true, :file "resources\\public\\js\\schema\\core.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists [[& schemas]], :arglists-meta (nil)}, :method-params [(schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 500, :end-line 500, :max-fixed-arity 0, :fn-var true, :arglists [[& schemas]], :doc "A value that must satisfy every schema in schemas.", :test true}}, :require-macros {schema.macros schema.macros, macros schema.macros}, :cljs.analyzer/constants {:order [:error :value :schema :type :schema.core/error :_ :v :h :parent :vs :p? :pred-name :else :proto-sym :p :proto-pred :name :schemas :preds-and-schemas :schema.core/missing :k :kspec :val-schema :optional? :klass :extra-validator-fn :output-schema :input-schemas], :seen #{:schema :klass :v :schema.core/error :parent :else :_ :kspec :name :extra-validator-fn :output-schema :value :proto-sym :input-schemas :type :val-schema :schema.core/missing :preds-and-schemas :k :optional? :schemas :h :pred-name :error :p? :proto-pred :p :vs}}, :doc "A library for data shape definition and validation. A Schema is just Clojure data,\n   which can be used to document and validate Clojure functions and data.\n\n   For example,\n\n   (def FooBar {:foo Keyword :bar [Number]}) ;; a schema\n\n   (check FooBar {:foo :k :bar [1.0 2.0 3.0]})\n   ==> nil\n\n   representing successful validation, but the following all return helpful errors\n   describing how the provided data fails to measure up to schema FooBar's standards.\n\n   (check FooBar {:bar [1.0 2.0 3.0]})\n   ==> {:foo missing-required-key}\n\n   (check FooBar {:foo 1 :bar [1.0 2.0 3.0]})\n   ==> {:foo (not (keyword? 1))}\n\n   (check FooBar {:foo :k :bar [1.0 2.0 3.0] :baz 1})\n   ==> {:baz disallowed-key}\n\n   Schema lets you describe your leaf values using the Any, Keyword, Symbol, Number,\n   String, and Int definitions below, or (in Clojure) you can use arbitrary Java\n   classes or primitive casts to describe simple values.\n\n   From there, you can build up schemas for complex types using Clojure syntax\n   (map literals for maps, set literals for sets, vector literals for sequences,\n   with details described below), plus helpers below that provide optional values,\n   enumerations, arbitrary predicates, and more.\n\n   Assuming you (:require [schema.core :as s :include-macros true]),\n   Schema also provides macros for defining records with schematized elements\n   (s/defrecord), and named or anonymous functions (s/fn and s/defn) with\n   schematized inputs and return values.  In addition to producing better-documented\n   records and functions, these macros allow you to retrieve the schema associated\n   with the defined record or function.  Moreover, functions include optional\n   *validation*, which will throw an error if the inputs or outputs do not\n   match the provided schemas:\n\n   (s/defrecord FooBar\n    [foo :- Int\n     bar :- String])\n\n   (s/defn quux :- Int\n    [foobar :- Foobar\n     mogrifier :- Number]\n    (* mogrifier (+ (:foo foobar) (Long/parseLong (:bar foobar)))))\n\n   (quux (FooBar. 10 \"5\") 2)\n   ==> 30\n\n   (fn-schema quux)\n   ==> (=> Int (record user.FooBar {:foo Int, :bar java.lang.String}) java.lang.Number)\n\n   (s/with-fn-validation (quux (FooBar. 10.2 \"5\") 2))\n   ==> Input to quux does not match schema: [(named {:foo (not (integer? 10.2))} foobar) nil]\n\n   As you can see, the preferred syntax for providing type hints to schema's defrecord,\n   fn, and defn macros is to follow each element, argument, or function name with a\n   :- schema.  Symbols without schemas default to a schema of Any.  In Clojure,\n   class (e.g., clojure.lang.String) and primitive schemas (long, double) are also\n   propagated to tag metadata to ensure you get the type hinting and primitive\n   behavior you ask for.\n\n   If you don't like this style, standard Clojure-style typehints are also supported:\n\n   (fn-schema (s/fn [^String x]))\n   ==> (=> Any java.lang.String)\n\n   You can directly type hint a symbol as a class, primitive, or simple\n   schema.\n\n   See the docstrings of defrecord, fn, and defn for more details about how\n   to use these macros."}