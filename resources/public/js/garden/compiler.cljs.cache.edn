;; Analyzed by ClojureScript 0.0-3211
{:use-macros {with-media-query-context garden.compiler, with-selector-context garden.compiler}, :excludes #{}, :name garden.compiler, :imports nil, :requires {units garden.units, garden.units garden.units, garden.types garden.types, garden.util garden.util, color garden.color, garden.selectors garden.selectors, util garden.util, compression garden.compression, string clojure.string, garden.color garden.color, clojure.string clojure.string, garden.compression garden.compression, selectors garden.selectors}, :uses {CSSUnit garden.types, CSSFunction garden.types, CSSAtRule garden.types, CSSColor garden.color}, :defs {r-brace {:meta {:private true, :end-column 23, :end-line 355, :column 16, :line 355, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :file "resources\\public\\js\\garden\\compiler.cljs", :line 355, :column 1, :end-line 355, :end-column 23, :private true, :test true, :name garden.compiler/r-brace}, extract-reference {:protocol-inline nil, :meta {:arglists (quote ([selector])), :doc "Extract the selector portion of a parent selector reference.", :private true, :end-column 25, :end-line 179, :column 8, :line 179, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/extract-reference, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 25, :method-params ([selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 1, :fn-var true, :arglists (quote ([selector])), :doc "Extract the selector portion of a parent selector reference.", :test true}, expand-declaration-1 {:protocol-inline nil, :meta {:arglists (quote ([d])), :end-column 27, :end-line 149, :column 7, :line 149, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :name garden.compiler/expand-declaration-1, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 27, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([d])), :test true}, render-color {:protocol-inline nil, :meta {:arglists (quote ([c])), :private true, :end-column 29, :end-line 537, :column 17, :line 537, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/render-color, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 29, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 537, :end-line 537, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, top-level-expression? {:protocol-inline nil, :meta {:arglists (quote ([x])), :private true, :end-column 29, :end-line 100, :column 8, :line 100, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/top-level-expression?, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 29, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, expand-seqs {:protocol-inline nil, :meta {:arglists (quote ([coll])), :doc "Like flatten but only affects seqs.", :private true, :end-column 19, :end-line 136, :column 8, :line 136, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/expand-seqs, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 19, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Like flatten but only affects seqs.", :test true}, render-selector {:protocol-inline nil, :meta {:arglists (quote ([selector])), :private true, :end-column 23, :end-line 470, :column 8, :line 470, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/render-selector, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 23, :method-params ([selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 470, :end-line 470, :max-fixed-arity 1, :fn-var true, :arglists (quote ([selector])), :test true}, render-declaration {:protocol-inline nil, :meta {:arglists (quote ([declaration])), :private true, :end-column 26, :end-line 461, :column 8, :line 461, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/render-declaration, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 26, :method-params ([declaration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 461, :end-line 461, :max-fixed-arity 1, :fn-var true, :arglists (quote ([declaration])), :test true}, do-preamble {:protocol-inline nil, :meta {:arglists (quote ([{:keys [preamble]} stylesheet])), :doc "Prefix stylesheet with files in preamble. Not available in\n  ClojureScript.", :private true, :end-column 19, :end-line 712, :column 8, :line 712, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/do-preamble, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 19, :method-params ([p__13144 stylesheet]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 712, :end-line 712, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [preamble]} stylesheet])), :doc "Prefix stylesheet with files in preamble. Not available in\n  ClojureScript.", :test true}, auto-prefix? {:protocol-inline nil, :meta {:arglists (quote ([property])), :private true, :end-column 20, :end-line 96, :column 8, :line 96, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/auto-prefix?, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 20, :method-params ([property]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([property])), :test true}, render-function {:protocol-inline nil, :meta {:arglists (quote ([css-function])), :doc "Render a CSS function.", :private true, :end-column 23, :end-line 528, :column 8, :line 528, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/render-function, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 23, :method-params ([css-function]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 528, :end-line 528, :max-fixed-arity 1, :fn-var true, :arglists (quote ([css-function])), :doc "Render a CSS function.", :test true}, expand {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc "Return a list containing the expanded form of `this`.", :protocol garden.compiler/IExpandable, :end-column 10, :end-line 130, :column 4, :line 130, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :protocol garden.compiler/IExpandable, :name garden.compiler/expand, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return a list containing the expanded form of `this`.", :test true}, compile-css {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(flags rules)], :arglists [[flags & rules]], :arglists-meta (nil)}, :arglists (quote ([flags & rules])), :doc "Convert any number of Clojure data structures to CSS.", :end-column 18, :end-line 738, :column 7, :line 738, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :name garden.compiler/compile-css, :variadic true, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(flags rules)], :arglists [[flags & rules]], :arglists-meta (nil)}, :method-params [(flags rules)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 738, :end-line 738, :max-fixed-arity 1, :fn-var true, :arglists [[flags & rules]], :doc "Convert any number of Clojure data structures to CSS.", :test true}, IExpandable {:meta {:protocol-info {:methods {expand [[this]]}}, :protocol-symbol true, :doc nil, :end-column 25, :end-line 129, :column 14, :line 129, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :protocol-symbol true, :name garden.compiler/IExpandable, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 25, :column 1, :line 129, :protocol-info {:methods {expand [[this]]}}, :info nil, :end-line 129, :impls #{nil cljs.core/PersistentHashMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/IndexedSeq garden.color/CSSColor cljs.core/BlackNode cljs.core/LazySeq cljs.core/Subvec cljs.core/ArrayNodeSeq garden.types/CSSFunction default cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq garden.types/CSSAtRule cljs.core/PersistentTreeMap cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/RedNode}, :doc nil, :test true}, render-media-expr {:protocol-inline nil, :meta {:arglists (quote ([expr])), :doc "Make a media query expession from one or more maps. Keys are not\n  validated but values have the following semantics:\n  \n    `true`  as in `{:screen true}`  == \"screen\"\n    `false` as in `{:screen false}` == \"not screen\"\n    `:only` as in `{:screen :only}  == \"only screen\"", :private true, :end-column 25, :end-line 501, :column 8, :line 501, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/render-media-expr, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 25, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 501, :end-line 501, :max-fixed-arity 1, :fn-var true, :arglists (quote ([expr])), :doc "Make a media query expession from one or more maps. Keys are not\n  validated but values have the following semantics:\n  \n    `true`  as in `{:screen true}`  == \"screen\"\n    `false` as in `{:screen false}` == \"not screen\"\n    `:only` as in `{:screen :only}  == \"only screen\"", :test true}, auto-prefixed-properties {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "Return the current list of auto-prefixed properties specified in `*flags*`.", :private true, :end-column 32, :end-line 91, :column 8, :line 91, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/auto-prefixed-properties, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Return the current list of auto-prefixed properties specified in `*flags*`.", :test true}, l-brace {:meta {:private true, :end-column 23, :end-line 354, :column 16, :line 354, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :file "resources\\public\\js\\garden\\compiler.cljs", :line 354, :column 1, :end-line 354, :end-column 23, :private true, :test true, :name garden.compiler/l-brace}, comma-separated-list {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([xs] [f xs]), :arglists ([xs] [f xs]), :arglists-meta (nil nil)}, :arglists (quote ([xs] [f xs])), :doc "Return a comma separated list of values. Subsequences are joined with\n   spaces.", :private true, :end-column 28, :end-line 368, :column 8, :line 368, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/comma-separated-list, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([xs] [f xs]), :arglists ([xs] [f xs]), :arglists-meta (nil nil)}, :method-params ([xs] [f xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 368, :end-line 368, :max-fixed-arity 2, :fn-var true, :arglists ([xs] [f xs]), :doc "Return a comma separated list of values. Subsequences are joined with\n   spaces.", :test true}, render-at-rule {:meta {:doc "Render a CSS at-rule", :private true, :end-column 35, :end-line 547, :column 21, :line 547, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/render-at-rule, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 35, :column 1, :line 547, :end-line 547, :doc "Render a CSS at-rule", :test true}, expand-selector {:protocol-inline nil, :meta {:arglists (quote ([selector parent])), :private true, :end-column 23, :end-line 197, :column 8, :line 197, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/expand-selector, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 23, :method-params ([selector parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 197, :end-line 197, :max-fixed-arity 2, :fn-var true, :arglists (quote ([selector parent])), :test true}, *flags* {:meta {:doc "The current compiler flags.", :private true, :dynamic true, :end-column 10, :end-line 26, :column 3, :line 26, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/*flags*, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 10, :column 1, :dynamic true, :line 22, :end-line 26, :doc "The current compiler flags.", :test true}, expand-declaration {:protocol-inline nil, :meta {:arglists (quote ([d])), :private true, :end-column 26, :end-line 164, :column 8, :line 164, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/expand-declaration, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 26, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([d])), :test true}, indent {:meta {:private true, :end-column 22, :end-line 359, :column 16, :line 359, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :file "resources\\public\\js\\garden\\compiler.cljs", :line 359, :column 1, :end-line 359, :end-column 22, :private true, :test true, :name garden.compiler/indent}, render-media-expr-part {:protocol-inline nil, :meta {:arglists (quote ([[k v]])), :doc "Render the individual components of a media expression.", :private true, :end-column 30, :end-line 489, :column 8, :line 489, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/render-media-expr-part, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 30, :method-params ([p__13119]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 489, :end-line 489, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[k v]])), :doc "Render the individual components of a media expression.", :test true}, do-output-to {:protocol-inline nil, :meta {:arglists (quote ([{:keys [output-to]} stylesheet])), :doc "Write contents of stylesheet to disk.", :private true, :end-column 20, :end-line 729, :column 8, :line 729, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/do-output-to, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 20, :method-params ([p__13150 stylesheet]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 729, :end-line 729, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [output-to]} stylesheet])), :doc "Write contents of stylesheet to disk.", :test true}, indent-loc-re {:meta {:doc "Match the start of a line if the characters immediately\n  after it are spaces or used in a CSS id (#), class (.), or tag name.", :private true, :end-column 16, :end-line 387, :column 3, :line 387, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/indent-loc-re, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 16, :column 1, :line 383, :end-line 387, :doc "Match the start of a line if the characters immediately\n  after it are spaces or used in a CSS id (#), class (.), or tag name.", :test true}, expand-stylesheet {:protocol-inline nil, :meta {:arglists (quote ([xs])), :private true, :end-column 25, :end-line 265, :column 8, :line 265, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/expand-stylesheet, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 25, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 265, :end-line 265, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs])), :test true}, *media-query-context* {:meta {:doc "The current media query context.", :private true, :dynamic true, :end-column 24, :end-line 71, :column 3, :line 71, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/*media-query-context*, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 24, :column 1, :dynamic true, :line 67, :end-line 71, :doc "The current media query context.", :test true}, render-value {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "Render the value portion of a declaration.", :private true, :end-column 20, :end-line 402, :column 8, :line 402, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/render-value, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 402, :end-line 402, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Render the value portion of a declaration.", :test true}, indent-str {:protocol-inline nil, :meta {:arglists (quote ([s])), :private true, :end-column 18, :end-line 393, :column 8, :line 393, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/indent-str, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 393, :end-line 393, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :test true}, parent-selector-re {:meta {:doc "Matches a single \"&\" or \"&\" follow by one or more \n  non-whitespace characters.", :private true, :end-column 21, :end-line 176, :column 3, :line 176, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/parent-selector-re, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 21, :column 1, :line 172, :end-line 176, :doc "Matches a single \"&\" or \"&\" follow by one or more \n  non-whitespace characters.", :test true}, prefix-declaration {:protocol-inline nil, :meta {:arglists (quote ([declaration])), :doc "Prefix properties within a `declaration` if `{:prefix true}` is\n   set in its meta, or if a property is in the `:auto-prefix` set.", :private true, :end-column 26, :end-line 451, :column 8, :line 451, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/prefix-declaration, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 26, :method-params ([declaration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 451, :end-line 451, :max-fixed-arity 1, :fn-var true, :arglists (quote ([declaration])), :doc "Prefix properties within a `declaration` if `{:prefix true}` is\n   set in its meta, or if a property is in the `:auto-prefix` set.", :test true}, prefix-auto-properties {:protocol-inline nil, :meta {:arglists (quote ([vendors declaration])), :doc "Add prefixes to all blocks in `declaration` when property\n   is in the `:auto-prefix` set.", :private true, :end-column 30, :end-line 440, :column 8, :line 440, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/prefix-auto-properties, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 30, :method-params ([vendors declaration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 440, :end-line 440, :max-fixed-arity 2, :fn-var true, :arglists (quote ([vendors declaration])), :doc "Add prefixes to all blocks in `declaration` when property\n   is in the `:auto-prefix` set.", :test true}, comma {:meta {:private true, :end-column 21, :end-line 351, :column 16, :line 351, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :file "resources\\public\\js\\garden\\compiler.cljs", :line 351, :column 1, :end-line 351, :end-column 21, :private true, :test true, :name garden.compiler/comma}, expand-at-rule {:meta {:private true, :end-column 35, :end-line 223, :column 21, :line 223, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :file "resources\\public\\js\\garden\\compiler.cljs", :line 223, :column 1, :end-line 223, :end-column 35, :private true, :test true, :name garden.compiler/expand-at-rule}, prefixed-blocks {:protocol-inline nil, :meta {:arglists (quote ([vendors [p v]])), :doc "Sequence of blocks with their properties prefixed by\n   each vendor in `vendors`.", :private true, :end-column 23, :end-line 427, :column 8, :line 427, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/prefixed-blocks, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 23, :method-params ([vendors p__13102]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 427, :end-line 427, :max-fixed-arity 2, :fn-var true, :arglists (quote ([vendors [p v]])), :doc "Sequence of blocks with their properties prefixed by\n   each vendor in `vendors`.", :test true}, expand-media-query-expression {:protocol-inline nil, :meta {:arglists (quote ([expression])), :private true, :end-column 37, :end-line 241, :column 8, :line 241, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/expand-media-query-expression, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 37, :method-params ([expression]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 1, :fn-var true, :arglists (quote ([expression])), :test true}, l-brace-1 {:meta {:private true, :end-column 25, :end-line 356, :column 16, :line 356, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :file "resources\\public\\js\\garden\\compiler.cljs", :line 356, :column 1, :end-line 356, :end-column 25, :private true, :test true, :name garden.compiler/l-brace-1}, *selector-context* {:meta {:doc "The current parent selector context.", :private true, :dynamic true, :end-column 21, :end-line 65, :column 3, :line 65, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/*selector-context*, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 21, :column 1, :dynamic true, :line 61, :end-line 65, :doc "The current parent selector context.", :test true}, r-brace-1 {:meta {:private true, :end-column 25, :end-line 357, :column 16, :line 357, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :file "resources\\public\\js\\garden\\compiler.cljs", :line 357, :column 1, :end-line 357, :end-column 25, :private true, :test true, :name garden.compiler/r-brace-1}, expand-rule {:protocol-inline nil, :meta {:arglists (quote ([rule])), :private true, :end-column 19, :end-line 205, :column 8, :line 205, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/expand-rule, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 19, :method-params ([rule]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rule])), :test true}, rule-sep {:meta {:private true, :end-column 24, :end-line 358, :column 16, :line 358, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :file "resources\\public\\js\\garden\\compiler.cljs", :line 358, :column 1, :end-line 358, :end-column 24, :private true, :test true, :name garden.compiler/rule-sep}, compile-style {:protocol-inline nil, :meta {:arglists (quote ([ms])), :doc "Convert a sequence of maps into CSS for use with the HTML style\n   attribute.", :end-column 20, :end-line 692, :column 7, :line 692, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :name garden.compiler/compile-style, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 20, :method-params ([ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 692, :end-line 692, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ms])), :doc "Convert a sequence of maps into CSS for use with the HTML style\n   attribute.", :test true}, space-separated-list {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([xs] [f xs]), :arglists ([xs] [f xs]), :arglists-meta (nil nil)}, :arglists (quote ([xs] [f xs])), :doc "Return a space separated list of values.", :private true, :end-column 28, :end-line 361, :column 8, :line 361, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/space-separated-list, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([xs] [f xs]), :arglists ([xs] [f xs]), :arglists-meta (nil nil)}, :method-params ([xs] [f xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 361, :end-line 361, :max-fixed-arity 2, :fn-var true, :arglists ([xs] [f xs]), :doc "Return a space separated list of values.", :test true}, render-property-and-value {:protocol-inline nil, :meta {:arglists (quote ([[prop val]])), :private true, :end-column 33, :end-line 409, :column 8, :line 409, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/render-property-and-value, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 33, :method-params ([p__13098]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 409, :end-line 409, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[prop val]])), :test true}, render-css {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc "Convert a Clojure data type in to a string of CSS.", :protocol garden.compiler/CSSRenderer, :end-column 14, :end-line 345, :column 4, :line 345, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :protocol garden.compiler/CSSRenderer, :name garden.compiler/render-css, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 344, :end-line 345, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Convert a Clojure data type in to a string of CSS.", :test true}, prefix-all-properties {:protocol-inline nil, :meta {:arglists (quote ([vendors declaration])), :doc "Add prefixes to all blocks in `declaration` using\n   vendor prefixes in `vendors`.", :private true, :end-column 29, :end-line 434, :column 8, :line 434, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/prefix-all-properties, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 29, :method-params ([vendors declaration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 434, :end-line 434, :max-fixed-arity 2, :fn-var true, :arglists (quote ([vendors declaration])), :doc "Add prefixes to all blocks in `declaration` using\n   vendor prefixes in `vendors`.", :test true}, do-compile {:protocol-inline nil, :meta {:arglists (quote ([flags rules])), :doc "Return a string of CSS.", :private true, :end-column 18, :end-line 702, :column 8, :line 702, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/do-compile, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 18, :method-params ([flags rules]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 702, :end-line 702, :max-fixed-arity 2, :fn-var true, :arglists (quote ([flags rules])), :doc "Return a string of CSS.", :test true}, expand-selector-reference {:protocol-inline nil, :meta {:arglists (quote ([selector])), :private true, :end-column 33, :end-line 187, :column 8, :line 187, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/expand-selector-reference, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 33, :method-params ([selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 1, :fn-var true, :arglists (quote ([selector])), :test true}, do-compression {:protocol-inline nil, :meta {:arglists (quote ([{:keys [pretty-print? pretty-print]} stylesheet])), :doc "Compress CSS if the pretty-print(?) flag is true.", :private true, :end-column 22, :end-line 721, :column 8, :line 721, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/do-compression, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 22, :method-params ([p__13147 stylesheet]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 721, :end-line 721, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [pretty-print? pretty-print]} stylesheet])), :doc "Compress CSS if the pretty-print(?) flag is true.", :test true}, colon {:meta {:private true, :end-column 21, :end-line 352, :column 16, :line 352, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :file "resources\\public\\js\\garden\\compiler.cljs", :line 352, :column 1, :end-line 352, :end-column 21, :private true, :test true, :name garden.compiler/colon}, add-blocks {:protocol-inline nil, :meta {:arglists (quote ([f declaration])), :doc "For each block in `declaration`, add sequence of blocks\n   returned from calling `f` on the block.", :private true, :end-column 18, :end-line 421, :column 8, :line 421, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/add-blocks, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 18, :method-params ([f declaration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 421, :end-line 421, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f declaration])), :doc "For each block in `declaration`, add sequence of blocks\n   returned from calling `f` on the block.", :test true}, render-rule {:protocol-inline nil, :meta {:arglists (quote ([[selector declarations :as rule]])), :doc "Convert a vector to a CSS rule string. The vector is expected to be\n  fully expanded.", :private true, :end-column 19, :end-line 474, :column 8, :line 474, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/render-rule, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 19, :method-params ([p__13116]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 474, :end-line 474, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[selector declarations :as rule]])), :doc "Convert a vector to a CSS rule string. The vector is expected to be\n  fully expanded.", :test true}, vendors {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "Return the current list of browser vendors specified in `*flags*`.", :private true, :end-column 15, :end-line 86, :column 8, :line 86, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/vendors, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Return the current list of browser vendors specified in `*flags*`.", :test true}, media-expression-behavior {:meta {:doc "Retun a function to call when rendering a media expression.\n  The returned function accepts two arguments: the media\n  expression being evaluated and the current media expression context.\n  Both arguments are maps. This is used to provide semantics for nested\n  media queries.", :private true, :end-column 28, :end-line 57, :column 3, :line 57, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/media-expression-behavior, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 28, :column 1, :line 50, :end-line 57, :doc "Retun a function to call when rendering a media expression.\n  The returned function accepts two arguments: the media\n  expression being evaluated and the current media expression context.\n  Both arguments are maps. This is used to provide semantics for nested\n  media queries.", :test true}, CSSRenderer {:meta {:protocol-info {:methods {render-css [[this]]}}, :protocol-symbol true, :doc nil, :end-column 25, :end-line 344, :column 14, :line 344, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :protocol-symbol true, :name garden.compiler/CSSRenderer, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 25, :column 1, :line 344, :protocol-info {:methods {render-css [[this]]}}, :info nil, :end-line 344, :impls #{nil cljs.core/PersistentHashMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/IndexedSeq garden.types/CSSUnit garden.color/CSSColor cljs.core/Keyword cljs.core/BlackNode cljs.core/LazySeq cljs.core/Subvec cljs.core/ArrayNodeSeq number garden.types/CSSFunction default cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq garden.types/CSSAtRule cljs.core/PersistentTreeMap cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/RedNode}, :doc nil, :test true}, semicolon {:meta {:private true, :end-column 25, :end-line 353, :column 16, :line 353, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :file "resources\\public\\js\\garden\\compiler.cljs", :line 353, :column 1, :end-line 353, :end-column 25, :private true, :test true, :name garden.compiler/semicolon}, rule-join {:protocol-inline nil, :meta {:arglists (quote ([xs])), :private true, :end-column 17, :end-line 380, :column 8, :line 380, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/rule-join, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 17, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 380, :end-line 380, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs])), :test true}, divide-vec {:protocol-inline nil, :meta {:arglists (quote ([pred coll])), :doc "Return a vector of [(filter pred coll) (remove pred coll)].", :private true, :end-column 18, :end-line 106, :column 8, :line 106, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/divide-vec, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 18, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll])), :doc "Return a vector of [(filter pred coll) (remove pred coll)].", :test true}, render-unit {:protocol-inline nil, :meta {:arglists (quote ([css-unit])), :doc "Render a CSSUnit.", :private true, :end-column 19, :end-line 518, :column 8, :line 518, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\compiler.cljs"}, :private true, :name garden.compiler/render-unit, :variadic false, :file "resources\\public\\js\\garden\\compiler.cljs", :end-column 19, :method-params ([css-unit]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 518, :end-line 518, :max-fixed-arity 1, :fn-var true, :arglists (quote ([css-unit])), :doc "Render a CSSUnit.", :test true}}, :require-macros {units garden.units, garden.units garden.units, selectors garden.selectors, garden.selectors garden.selectors, color garden.color, garden.color garden.color, garden.compiler garden.compiler}, :cljs.analyzer/constants {:order [:pretty-print? :preamble :output-to :vendors :auto-prefix :media-expressions :nesting-behavior :default :merge :hierarchy :identifier :keyframes :value :frames :media :rules :media-queries :prefix :else :unit :magnitude :args :function :alpha :lightness :saturation :hue :import :url :pretty-print], :seen #{:args :hue :else :pretty-print? :saturation :unit :default :frames :value :auto-prefix :media-expressions :magnitude :rules :function :merge :prefix :vendors :output-to :preamble :media-queries :keyframes :nesting-behavior :url :identifier :lightness :alpha :import :hierarchy :pretty-print :media}}, :doc "Functions for compiling Clojure data structures to CSS."}