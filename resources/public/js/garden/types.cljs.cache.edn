;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name garden.types, :imports nil, :requires nil, :uses nil, :defs {map->CSSAtRule {:protocol-inline nil, :meta {:arglists (quote ([G__13376])), :factory :map, :internal-ctor true, :end-column 21, :end-line 8, :column 12, :line 8, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\types.cljs"}, :name garden.types/map->CSSAtRule, :variadic false, :file "resources\\public\\js\\garden\\types.cljs", :end-column 21, :method-params ([G__13376]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__13376])), :test true}, ->CSSAtRule {:protocol-inline nil, :meta {:arglists (quote ([identifier value])), :factory :positional, :internal-ctor true, :end-column 21, :end-line 8, :column 12, :line 8, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\types.cljs"}, :name garden.types/->CSSAtRule, :variadic false, :file "resources\\public\\js\\garden\\types.cljs", :end-column 21, :method-params ([identifier value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([identifier value])), :test true}, CSSAtRule {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name garden.types/CSSAtRule, :file "resources\\public\\js\\garden\\types.cljs", :end-column 21, :type true, :column 12, :internal-ctor true, :line 8, :record true, :end-line 8, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->CSSFunction {:protocol-inline nil, :meta {:arglists (quote ([G__13368])), :factory :map, :internal-ctor true, :end-column 23, :end-line 6, :column 12, :line 6, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\types.cljs"}, :name garden.types/map->CSSFunction, :variadic false, :file "resources\\public\\js\\garden\\types.cljs", :end-column 23, :method-params ([G__13368]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__13368])), :test true}, ->CSSFunction {:protocol-inline nil, :meta {:arglists (quote ([function args])), :factory :positional, :internal-ctor true, :end-column 23, :end-line 6, :column 12, :line 6, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\types.cljs"}, :name garden.types/->CSSFunction, :variadic false, :file "resources\\public\\js\\garden\\types.cljs", :end-column 23, :method-params ([function args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([function args])), :test true}, CSSFunction {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name garden.types/CSSFunction, :file "resources\\public\\js\\garden\\types.cljs", :end-column 23, :type true, :column 12, :internal-ctor true, :line 6, :record true, :end-line 6, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->CSSUnit {:protocol-inline nil, :meta {:arglists (quote ([G__13360])), :factory :map, :internal-ctor true, :end-column 19, :end-line 4, :column 12, :line 4, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\types.cljs"}, :name garden.types/map->CSSUnit, :variadic false, :file "resources\\public\\js\\garden\\types.cljs", :end-column 19, :method-params ([G__13360]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__13360])), :test true}, ->CSSUnit {:protocol-inline nil, :meta {:arglists (quote ([unit magnitude])), :factory :positional, :internal-ctor true, :end-column 19, :end-line 4, :column 12, :line 4, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\types.cljs"}, :name garden.types/->CSSUnit, :variadic false, :file "resources\\public\\js\\garden\\types.cljs", :end-column 19, :method-params ([unit magnitude]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 4, :end-line 4, :max-fixed-arity 2, :fn-var true, :arglists (quote ([unit magnitude])), :test true}, CSSUnit {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name garden.types/CSSUnit, :file "resources\\public\\js\\garden\\types.cljs", :end-column 19, :type true, :column 12, :internal-ctor true, :line 4, :record true, :end-line 4, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}}, :require-macros nil, :cljs.analyzer/constants {:order [:unit :magnitude :function :args :identifier :value], :seen #{:args :unit :value :magnitude :function :identifier}}, :doc "Internal types used by Garden."}