;; Analyzed by ClojureScript 0.0-3211
{:defs {style {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists [[& maps]], :arglists-meta (nil)}, :arglists (quote ([& maps])), :doc "Convert a variable number of maps into a string of CSS for use with\n  the HTML `style` attribute.", :tag String, :end-column 20, :end-line 12, :column 15, :line 12, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\core.cljs"}, :name garden.core/style, :variadic true, :file "resources\\public\\js\\garden\\core.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists [[& maps]], :arglists-meta (nil)}, :method-params [(maps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 12, :ret-tag String, :end-line 12, :max-fixed-arity 0, :tag String, :fn-var true, :arglists [[& maps]], :doc "Convert a variable number of maps into a string of CSS for use with\n  the HTML `style` attribute.", :test true}, css {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(rules)], :arglists [[& rules]], :arglists-meta (nil)}, :arglists (quote ([rules] [flags? rules])), :doc "Convert a variable number of Clojure data structure to a string of\n  CSS. The first argument may be a list of flags for the compiler.", :tag String, :end-column 18, :end-line 5, :column 15, :line 5, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\core.cljs"}, :name garden.core/css, :variadic true, :file "resources\\public\\js\\garden\\core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(rules)], :arglists [[& rules]], :arglists-meta (nil)}, :method-params [(rules)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 5, :ret-tag String, :end-line 5, :max-fixed-arity 0, :tag String, :fn-var true, :arglists [[& rules]], :doc "Convert a variable number of Clojure data structure to a string of\n  CSS. The first argument may be a list of flags for the compiler.", :test true}}, :imports nil, :requires {garden.compiler garden.compiler, compiler garden.compiler}, :uses nil, :require-macros {garden.compiler garden.compiler, compiler garden.compiler}, :use-macros nil, :excludes #{}, :doc "Convert Clojure data structures to CSS.", :name garden.core}