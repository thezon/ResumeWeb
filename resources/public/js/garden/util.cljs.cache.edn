;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name garden.util, :imports nil, :requires {goog.string.format goog.string.format, goog.string goog.string, t garden.types, garden.types garden.types, clojure.string clojure.string, string clojure.string}, :uses nil, :defs {space-join {:protocol-inline nil, :meta {:arglists (quote ([xs])), :doc "Return a space separated list of values.", :end-column 17, :end-line 63, :column 7, :line 63, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/space-join, :variadic false, :file "resources\\public\\js\\garden\\util.cljs", :end-column 17, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs])), :doc "Return a space separated list of values.", :test true}, at-import? {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "True if `x` is a CSS `@import` rule.", :end-column 17, :end-line 119, :column 7, :line 119, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/at-import?, :variadic false, :file "resources\\public\\js\\garden\\util.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "True if `x` is a CSS `@import` rule.", :test true}, int->string {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(i [radix])], :arglists [[i & [radix]]], :arglists-meta (nil)}, :arglists (quote ([i & [radix]])), :doc "Convert an integer to a string with optional base.", :end-column 18, :end-line 54, :column 7, :line 54, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/int->string, :variadic true, :file "resources\\public\\js\\garden\\util.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(i [radix])], :arglists [[i & [radix]]], :arglists-meta (nil)}, :method-params [(i [radix])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists [[i & [radix]]], :doc "Convert an integer to a string with optional base.", :test true}, rule? {:meta {:doc "Alias to `vector?`.", :end-column 8, :end-line 99, :column 3, :line 99, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :file "resources\\public\\js\\garden\\util.cljs", :line 97, :column 1, :end-line 99, :end-column 8, :doc "Alias to `vector?`.", :test true, :name garden.util/rule?}, to-str {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc "Convert a value into a string.", :protocol garden.util/ToString, :tag String, :end-column 18, :end-line 27, :column 12, :line 27, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :protocol garden.util/ToString, :name garden.util/to-str, :variadic false, :file "resources\\public\\js\\garden\\util.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :ret-tag String, :end-line 27, :max-fixed-arity 1, :tag String, :fn-var true, :arglists (quote ([this])), :doc "Convert a value into a string.", :test true}, cartesian-product {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(seqs)], :arglists [[& seqs]], :arglists-meta (nil)}, :arglists (quote ([& seqs])), :doc "All the ways to take one item from each sequence.", :end-column 24, :end-line 167, :column 7, :line 167, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/cartesian-product, :variadic true, :file "resources\\public\\js\\garden\\util.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(seqs)], :arglists [[& seqs]], :arglists-meta (nil)}, :method-params [(seqs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 0, :fn-var true, :arglists [[& seqs]], :doc "All the ways to take one item from each sequence.", :test true}, format {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt args)], :arglists [[fmt & args]], :arglists-meta (nil)}, :arglists (quote ([fmt & args])), :doc "Formats a string using goog.string.format.", :end-column 13, :end-line 17, :column 7, :line 17, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/format, :variadic true, :file "resources\\public\\js\\garden\\util.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt args)], :arglists [[fmt & args]], :arglists-meta (nil)}, :method-params [(fmt args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists [[fmt & args]], :doc "Formats a string using goog.string.format.", :test true}, clip {:protocol-inline nil, :meta {:arglists (quote ([a b n])), :doc "Return a number such that n is no less than a and no more than b.", :end-column 11, :end-line 155, :column 7, :line 155, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/clip, :variadic false, :file "resources\\public\\js\\garden\\util.cljs", :end-column 11, :method-params ([a b n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a b n])), :doc "Return a number such that n is no less than a and no more than b.", :test true}, between? {:protocol-inline nil, :meta {:arglists (quote ([n a b])), :doc "True if n is a number between a and b.", :end-column 15, :end-line 148, :column 7, :line 148, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/between?, :variadic false, :file "resources\\public\\js\\garden\\util.cljs", :end-column 15, :method-params ([n a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 3, :fn-var true, :arglists (quote ([n a b])), :doc "True if n is a number between a and b.", :test true}, at-media? {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "True if `x` is a CSS `@media` rule.", :end-column 16, :end-line 109, :column 7, :line 109, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/at-media?, :variadic false, :file "resources\\public\\js\\garden\\util.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "True if `x` is a CSS `@media` rule.", :test true}, string->int {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [radix])], :arglists [[s & [radix]]], :arglists-meta (nil)}, :arglists (quote ([s & [radix]])), :doc "Convert a string to an integer with optional base.", :end-column 18, :end-line 45, :column 7, :line 45, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/string->int, :variadic true, :file "resources\\public\\js\\garden\\util.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [radix])], :arglists [[s & [radix]]], :arglists-meta (nil)}, :method-params [(s [radix])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists [[s & [radix]]], :doc "Convert a string to an integer with optional base.", :test true}, as-str {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :arglists (quote ([& args])), :doc "Convert a variable number of values into strings.", :tag String, :end-column 21, :end-line 40, :column 15, :line 40, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/as-str, :variadic true, :file "resources\\public\\js\\garden\\util.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists [[& args]], :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 40, :ret-tag String, :end-line 40, :max-fixed-arity 0, :tag String, :fn-var true, :arglists [[& args]], :doc "Convert a variable number of values into strings.", :test true}, comma-join {:protocol-inline nil, :meta {:arglists (quote ([xs])), :doc "Return a comma separated list of values. Subsequences are joined with\n   spaces.", :end-column 17, :end-line 68, :column 7, :line 68, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/comma-join, :variadic false, :file "resources\\public\\js\\garden\\util.cljs", :end-column 17, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs])), :doc "Return a comma separated list of values. Subsequences are joined with\n   spaces.", :test true}, vendor-prefix {:protocol-inline nil, :meta {:arglists (quote ([p s])), :doc "Attach a CSS vendor prefix to s.", :end-column 20, :end-line 132, :column 7, :line 132, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/vendor-prefix, :variadic false, :file "resources\\public\\js\\garden\\util.cljs", :end-column 20, :method-params ([p s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p s])), :doc "Attach a CSS vendor prefix to s.", :test true}, hash-map? {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "True if `(map? x)` and `x` does not satisfy `clojure.lang.IRecord`.", :end-column 16, :end-line 92, :column 7, :line 92, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/hash-map?, :variadic false, :file "resources\\public\\js\\garden\\util.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "True if `(map? x)` and `x` does not satisfy `clojure.lang.IRecord`.", :test true}, natural? {:protocol-inline nil, :meta {:arglists (quote ([n])), :doc "True if n is a natural number.", :end-column 15, :end-line 143, :column 7, :line 143, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/natural?, :variadic false, :file "resources\\public\\js\\garden\\util.cljs", :end-column 15, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "True if n is a natural number.", :test true}, record? {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "True if x is an instance of or satisfies clojure.lang.IRecord.", :end-column 14, :end-line 87, :column 7, :line 87, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/record?, :variadic false, :file "resources\\public\\js\\garden\\util.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "True if x is an instance of or satisfies clojure.lang.IRecord.", :test true}, ToString {:meta {:protocol-info {:methods {to-str [[this]]}}, :protocol-symbol true, :doc nil, :end-column 22, :end-line 26, :column 14, :line 26, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :protocol-symbol true, :name garden.util/ToString, :file "resources\\public\\js\\garden\\util.cljs", :end-column 22, :column 1, :line 26, :protocol-info {:methods {to-str [[this]]}}, :info nil, :end-line 26, :impls #{nil cljs.core/Keyword default}, :doc nil, :test true}, wrap-quotes {:protocol-inline nil, :meta {:arglists (quote ([s])), :doc "Wrap a string with double quotes.", :end-column 18, :end-line 78, :column 7, :line 78, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/wrap-quotes, :variadic false, :file "resources\\public\\js\\garden\\util.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Wrap a string with double quotes.", :test true}, prefix {:protocol-inline nil, :meta {:arglists (quote ([p s])), :doc "Attach a CSS style prefix to s.", :end-column 13, :end-line 124, :column 7, :line 124, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/prefix, :variadic false, :file "resources\\public\\js\\garden\\util.cljs", :end-column 13, :method-params ([p s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p s])), :doc "Attach a CSS style prefix to s.", :test true}, declaration? {:meta {:doc "Alias to `hash-map?`.", :end-column 15, :end-line 103, :column 3, :line 103, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :file "resources\\public\\js\\garden\\util.cljs", :line 101, :column 1, :end-line 103, :end-column 15, :doc "Alias to `hash-map?`.", :test true, :name garden.util/declaration?}, at-keyframes? {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "True if `x` is a CSS `@keyframes` rule.", :end-column 20, :end-line 114, :column 7, :line 114, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/at-keyframes?, :variadic false, :file "resources\\public\\js\\garden\\util.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "True if `x` is a CSS `@keyframes` rule.", :test true}, at-rule? {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 15, :end-line 105, :column 7, :line 105, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/at-rule?, :variadic false, :file "resources\\public\\js\\garden\\util.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, average {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(n m more)], :arglists [[n m & more]], :arglists-meta (nil)}, :arglists (quote ([n m & more])), :doc "Return the average of two or more numbers.", :end-column 14, :end-line 161, :column 7, :line 161, :file "C:\\Users\\Shannon\\Desktop\\Research\\Projects\\Pedistal\\resumeWeb\\resources\\public\\js\\garden\\util.cljs"}, :name garden.util/average, :variadic true, :file "resources\\public\\js\\garden\\util.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(n m more)], :arglists [[n m & more]], :arglists-meta (nil)}, :method-params [(n m more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 2, :fn-var true, :arglists [[n m & more]], :doc "Return the average of two or more numbers.", :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:identifier :media :keyframes :import], :seen #{:keyframes :identifier :import :media}}, :doc "Utility functions used by Garden."}