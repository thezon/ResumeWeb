cmdhistory=["(server/start runnable-service)" "(+ 1 1)" "(ns test)" "(+ 1 1)" "(ns testin)" "(+ 1 1)" "(+ 1` 1)" "(+ 1 1)" "(str {\:pr \\"test\\" })" "(vec (str {\:pr \\"test\\" }))" "(+ 1 1)" "(str {\:pr \\"one\\"})" "(\:pr (str {\:pr \\"one\\"}))" "(*read-eval* (str (\:pr {\:pr \\"one\\"})))" "(read-string (str (\:pr {\:pr \\"one\\"})))" "(+ 1 1)" "(ns testing)" "(+ 1 1)" "(alter-var-root \#'*out* (constantly *out*))" "(+ 2 2)" "(+ 1 1)" "(server/start runnable-service)" "(+ 1 1)" "(defonce runnable-service (server/create-server service/service))" "(+ 1 1)" "(server/start runnable-service)" "(+ 1 1)" "(.println System/out \\"test\\")" "(+ 1 1)" "(start. (Thread. (server/start runnable-service)))" "(.start (Thread. (server/start runnable-service)))" "(+ 1 1)" "(require 'ring.adapter.jetty)" "(defroutes app\\r\\n  (GET \\"/getsections\\" request (home-page request))\\r\\n  (GET \\"/statement\\" request (statement request))\\r\\n  (GET \\"/statement2\\" request (statement2 request))\\r\\n  (GET \\"/statement22\\" request (statement22 request))\\r\\n  (GET \\"/statement3\\" request (statement3 request)))" "(macroexpand '(defroutes app\\r\\n  (GET \\"/getsections\\" request (home-page request))\\r\\n  (GET \\"/statement\\" request (statement request))\\r\\n  (GET \\"/statement2\\" request (statement2 request))\\r\\n  (GET \\"/statement22\\" request (statement22 request))\\r\\n  (GET \\"/statement3\\" request (statement3 request))))" "(macroexpand-1 '(defroutes app\\r\\n  (GET \\"/getsections\\" request (home-page request))\\r\\n  (GET \\"/statement\\" request (statement request))\\r\\n  (GET \\"/statement2\\" request (statement2 request))\\r\\n  (GET \\"/statement22\\" request (statement22 request))\\r\\n  (GET \\"/statement3\\" request (statement3 request))))" "(macroexpand (defroutes app\\r\\n  (GET \\"/getsections\\" request (home-page request))\\r\\n  (GET \\"/statement\\" request (statement request))\\r\\n  (GET \\"/statement2\\" request (statement2 request))\\r\\n  (GET \\"/statement22\\" request (statement22 request))\\r\\n  (GET \\"/statement3\\" request (statement3 request))))" "(defroutes app\\r\\n  (GET \\"/getsections\\" request (home-page request))\\r\\n  (GET \\"/statement\\" request (statement request))\\r\\n  (GET \\"/statement2\\" {\:pr \\"test\\"})\\r\\n  (GET \\"/statement22\\" request (statement22 request))\\r\\n  (GET \\"/statement3\\" request (statement3 request))\\r\\n  (route/resources \\"/pages/\\"))" "(+ 1 1)" "(defn statement2 [request] \\r\\n    (ring-resp/response (str {\:pr (\:pr (\:params request ))})))" "\\r\\n(ring.adapter.jetty/run-jetty (handler/site service/app) {\:port 3000})" "(+ 1 1)" "(get-statement)" "(get-section)" "(get-statement)" "(get-section)" "(querywrap '[\:find ?sec-name \:where [_ \:section/name ?sec-name]] nil)" "(querywrap '[\:find ?map \:where [_ \:position/title ?map]] nil)" "(get-section)" "(querywrap '[\:find ?map \:where [_ \:position/child ?map]] nil)" "(querywrap '[\:find ?map \:where [_ \:position/parent ?map]] nil)" "(querywrap '[\:find ?map \:where [_ \:position/resumetype ?map]] nil)" "(querywrap '[\:find ?map \:where [_ \:resume/resumetype ?map]] nil)" "(querywrap '[\:find ?map \:where [_ \:position/resumetype ?map]])" "(querywrap '[\:find ?map \:where [_ \:position/resumetype ?map]] nil)" "(querywrap '[\:find ?release-name b\:where [_ \:release/name ?release-name]] nil)" "(querywrap '[\:find ?release-name \:where [_ \:release/name ?release-name]] nil)" "(querywrap '[\:find ?map \:where [_ \:position/resumetype ?map]] nil)" "(querywrap '[\:find ?map \:where [_ \:resume/resumetype ?map]] nil)" "schema-tx" "data-tx" "(get-statement)" "(get-section)" "(get-statement)" "(get-section)" "(querywrap '[\:find ?map \:where [_ \:position/child ?map]] nil)" "(querywrap '[\:find ?sec-name \:where [?p \:section/name \\"Personal Statement\\"] [_ \:position/parent ?p]] nil)" "(querywrap '[\:find ?q \:where [?p \:section/name \\"Personal Statement\\"] [?q \:position/parent ?p]] nil)" "(querywrap '[\:find ?q \:where [?p \:section/name \\"Personal Statement\\"] [?q \:position/child ?p]] nil)" "(querywrap '[\:find ?q \:where [?p \:section/name \\"Projects\\"] [?q \:position/child ?p]] nil)" "(querywrap '[\:find ?q \:where [?p \:section/name \\"Projects\\"] [?q \:position/parent ?p]] nil)" "(querywrap '[\:find ?sec-name \:where [_ \:section/name ?sec-name]] nil))" "(querywrap '[\:find ?p ?q \:where [?p \:section/name \\"Projects\\"] [?q \:position/parent ?p]] nil)" "(querywrap '[\:find ?p ?q \:where [?p \:section/name _] [?q \:position/parent ?p]] nil)" "(querywrap '[\:find ?sec ?q \:where [?p \:section/name ?sec ] [?q \:position/parent ?p]] nil)" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] [?q \:position/parent ?p][_ \:position/child ?sub]] nil)" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\n             [\:find ?sub \:where [?p \:position/parent ?sub]]] nil)" "(querywrap '[\:find ?sec ?sb \:where [?p \:section/name ?sec ] \\n             [_ [\:find ?sub \:where [?p \:position/parent ?sub]] ?sb ]] nil)" "(defn get-children [key]\\n  (querywrap '[\:find ?string \:in $ ?key \:where [?p \:position/parent ?key][?p \:position/parent ?string]]))" "(querywrap '[\:find ?sec ?sb \:where [?p \:section/name ?sec ] \\n             [(get-children ?p)]] nil)" "(querywrap '[\:find ?sec \:where [?p \:section/name ?sec ] \\n             [(get-children ?p)]] nil)" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\n             [(get-children ?p) ?sub]] nil)" "(get-children 17592186045467)" "(defn get-children [key]\\n  (querywrap '[\:find ?string \:in $ ?key \:where [?p \:position/parent ?key][?p \:position/parent ?string]] key))" "(get-children 17592186045467)" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\n             [(get-children ?p) ?sub]] nil)" "(defn get-children [key]\\n  (querywrap '[\:find ?string \:in $ ?key \:where [?p \:position/parent ?key][?p \:position/parent ?string]] key))" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\n             [(get-children ?p) ?sub]] nil)" "(get-children 17592186045467)" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\n             [(get-children ?p) ?sub]] nil)" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\n             [(get-children ?p) ?sec]] nil)" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\n             [(get-children ?sec) ?sub]] nil)" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\n             [(+ 1 1) ?sec]] nil)" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\n             [(+ 1 1) $sub]] nil)" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\n             [(+ 1 1) ?sub]] nil)" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\n             [(get-children ?sec) ?sub]] nil)" "ns" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\n             [(data.resumedata/get-children ?sec) ?sub]] nil)" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\n             [(data.resumedata/get-children ?p) ?sub]] nil)" "(defn get-children [key]\\n  (querywrap '[\:find ?string \:in $ ?key \\n               \:where [?p \:position/parent ?key][?p \:section/name ?string]] key))" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\n             [(data.resumedata/get-children ?p) ?sub]] nil)" "(defn get-children [key]\\n  (querywrap '[\:find ?string \:in $ ?key \\n               \:where [?p \:position/parent ?key][?c \:position/child ?p][?c \:section/name ?string]] key))" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\n             [(data.resumedata/get-children ?p) ?sub]] nil)" "(defn get-children [key]\\n  (querywrap '[\:find ?string \:in $ ?key \\n               \:where [?p \:position/parent ?key][?p \:position/child ?c][?c \:section/name ?string]] key))" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\n             [(data.resumedata/get-children ?p) ?sub]] nil)" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\r\\n             [(data.resumedata/get-children ?p) ?sub]\\n             (not [(empy? ?sub)])])" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\r\\n             [(data.resumedata/get-children ?p) ?sub]\\n             (not [(empy? ?sub)])] nil)" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\r\\n             [(data.resumedata/get-children ?p) ?sub]\\n             (not [(fn [?sub] (empy? ?sub))])] nil)" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\r\\n             [(data.resumedata/get-children ?p) ?sub]\\n             (not [(empy? ?sub)])] nil)" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\r\\n             [(data.resumedata/get-children ?p) ?sub]\\n             (not [(count ?sub)])] nil)" "(querywrap '[\:find ?sec ?sub \:where [?p \:section/name ?sec ] \\r\\n             [(data.resumedata/get-children ?p) ?sub]] nil)" "(querywrap '[\:find  ?sub \:where [?p \:section/name ?sec ] \\r\\n             [(data.resumedata/get-children ?p) ?sub]] nil)" "(querywrap '[\:find ?sec ?sub ?count \:where [?p \:section/name ?sec ] \\r\\n             [(data.resumedata/get-children ?p) ?sub]\\n             [(count ?sub) ?count]] nil)" "(querywrap '[\:find ?sec ?sub ?count \:where [?p \:section/name ?sec ] \\r\\n             [(data.resumedata/get-children ?p) ?sub]\\n             [(> (count ?sub) 0) ?count]] nil)" "(querywrap '[\:find ?sec ?sub ?count \:where [?p \:section/name ?sec ] \\r\\n             [(data.resumedata/get-children ?p) ?sub]\\n             [(> (count ?sub) 0) ]] nil)" "(querywrap '[\:find ?sec ?sub  \:where [?p \:section/name ?sec ] \\r\\n             [(data.resumedata/get-children ?p) ?sub]\\n             [(> (count ?sub) 0) ]] nil)" "(querywrap '[\:find ?sec ?sub  \:where [?p \:section/name ?sec ] \\r\\n             [(data.resumedata/get-children ?p) ?sub]\\n             [(count ?sub) ]] nil)" "(querywrap '[\:find ?sec ?sub  \:where [?p \:section/name ?sec ] \\r\\n             [(data.resumedata/get-children ?p) ?sub]\\n             [(count ?sub) ?count]\\n             [(> ?count 0)]] nil)" "(querywrap '[\:find ?sec ?sub  \:where [?p \:section/name ?sec ] \\r\\n             [(data.resumedata/get-children ?p) ?sub]\\n             [(> (count ?sub) 0) ?count]] nil)" "(querywrap '[\:find ?string \:in $ ?key \\r\\n               \:where [?p \:position/child] \:position/parent ])" "(querywrap '[\:find ?string \:in $ ?key \\r\\n               \:where [?p \:position/child] \:position/parent ] nil)" "(querywrap '[\:find ?string \:in $ ?key \\r\\n               \:where [?p \:position/child \:position/parent ]] nil)" "(querywrap '[\:find ?p \\r\\n               \:where [?p \:position/child \:position/parent ]] nil)" "(querywrap '[\:find ?p \\r\\n               \:where [?p  \:position/parent \:position/child]] nil)" "(querywrap '[\:find ?sec ?sub  \:where [?p \:section/name ?sec ] \\r\\n             [(data.resumedata/get-children ?p) ?sub]\\n             [(count ?sub) ?count]\\n             [(> ?count 0)]] nil)" "(querywrap '[\:find ?sec \:where [_ \:section/name]])" "(querywrap '[\:find ?sec \:where [_ \:section/name ?sec]])" "(querywrap '[\:find ?sec \:where [_ \:section/name ?sec]] nil)" "(querywrap '[\:find ?sec \:where [_ \:section/name \\"Personal Statement\\"]] nil)" "(querywrap '[\:find ?sec \:where [?sec \:section/name \\"Personal Statement\\"]] nil)" "(querywrap '[\:find ?restype \:where [_ \:resume/type \\"clojure\\"]])" "(querywrap '[\:find ?restype \:where [_ \:resume/resumetype \\"Clojure\\"]] nil)" "(querywrap '[\:find ?restype \:where [?restype \:resume/resumetype \\"Clojure\\"]] nil)" "(defn get-resume[type]\\n  (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] nil))" "(get-resume \\"Clojure\\")" "(defn get-resume[type]\\n  (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type))" "(get-resume \\"Clojure\\")" "(defn get-resume-mapping [type]\\n  (querywrap '[\:find ?parent ?child \:in $ ?type \\n               \:where \\n               [?restype \:resume/resumetype ?type]\\n               [?t position/resumetype ?restype]\\n               [?t position/parent ?parent]\\n               [?t position/child ?child]]))" "(get-resume-mapping \\"Clojure\\")" "(defn get-resume-mapping [type]\\n  (querywrap '[\:find ?parent ?child \:in $ ?type \\n               \:where \\n               [?restype \:resume/resumetype ?type]\\n               [?t position/resumetype ?restype]\\n               [?t position/parent ?parent]\\n               [?t position/child ?child]] type))" "(get-resume-mapping \\"Clojure\\")" "(defn get-resume-mapping [parent]\\n  (querywrap '[\:find ?child \:in $ ?parent \\n               \:where \\n               [?t position/parent ?parent]\\n               [?t position/child ?child]] parent))" "(defn get-resume[type]\\n  (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(apply get-resume-mapping (get-resume \\"Clojure\\"))" "(get-resume-mapping 17592186045418)" "(get-resume-mapping (first (first (get-resume \\"Clojure\\"))))" "(defn get-resume[type]\\n  (first (first (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type))))" "(defn get-resume[type]\\n  (first \\n    (first \\n      (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type))))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?child \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?child ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume[type]\\n  (first \\n    (first \\n      (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type))))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?name ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [?child \:db/id ?name]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?name ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [?child \:db/ident ?name]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?name ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [?name \:db/ident ?child]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?name ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [?child \:db/ident ?name]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?name ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [?t \:value ?name]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?name ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [_  (datomic.api/entity ?t) ?name]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?name ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [_  (datomic.api/entity ?child) ?name]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?name ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [_  (datomic.api/entity-db ?child) ?name]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?name ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [_  (datomic.api/entity-db (first  (first?child))) ?name]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "\\n (querywrap '[\:find ?set\\n              \:where \\n              [(data.resumedata/get-resume-mapping 17592186045461) ?set]])" "\\n (querywrap '[\:find ?set\\n              \:where \\n              [(data.resumedata/get-resume-mapping 17592186045461) ?set]] nil)" "\\n (querywrap '[\:find ?eid \:in $ ?eid \:where [?eid]] 17592186045461)" "\\n (querywrap '[\:find ?eid \:in $ ?eid \:where [?eid]] 17592186045061)" "\\n (querywrap '[\:find ?eid ?value \:in $ ?eid\\n              \:where \\n              [?eid]\\n              [?eid ?value]] 17592186045061)" "\\n (querywrap '[\:find ?eid ?value \:in $ ?eid\\n              \:where \\n              [?eid]\\n              [?eid ?value]] 17592186045461)" "\\n (querywrap '[\:find ?eid ?value \:in $ ?eid\\n              \:where \\n              [?eid]\\n              [?eid ?value]] 17592186045449)" "\\n (querywrap '[\:find ?eid ?value \:in $ ?eid\\n              \:where \\n              [?eid]\\n              [?value]] 17592186045449)" "(datomic.api/entid conn 17592186045449)" "(datomic.api/entid uri 17592186045449)" "(datomic.api/entity-db uri 17592186045449)" "(datomic.api/entity-db 17592186045449)" "(.datomic.api/entity-db conn 17592186045449)" "(.datomic.api/entity-db  17592186045449)" "(datomic.api/entity-db 17592186045449)" "(datomic.api/entity conn 17592186045449)" "(datomic.api/entity uri 17592186045449)" "(datomic.api/entity (init-db) 17592186045449)" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?child ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume[type]\\n  (first \\n    (first \\n      (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type))))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?child ?name \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [?child ?name]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?child ?name \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume[type]\\n  (first \\n    (first \\n      (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type))))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?child ?name \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(defn get-resume[type]\\n  (first \\n    (first \\n      (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type))))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?child ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(defn get-resume[type]\\n  (first \\n    (first \\n      (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type))))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?child ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]]))\\n             ; [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?child ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]]) parent)\\n             ; [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?child ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]] parent))\\n             ; [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume[type]\\n  (first \\n    (first \\n      (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type))))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?child ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?child ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(. (init-db) entiity 17592186045473)" "(. (d/create-database uri) entiity 17592186045473)" "(. (d/create-database uri) entity 17592186045473)" "(datomic.api/entity (d/connect uri) 17592186045473)" "(d/create-database uri)" "(d/connect uri)" "(datomic.api/entity d 17592186045473)" "(datomic.api/entity (datomic.api/db conn) 17592186045473)" "(datomic.api/entity (datomic.api/db (d/connect uri)) 17592186045473)" "(datomic.api/db (datomic.api/db (d/connect uri)) 17592186045473)" "(datomic.api/entity-db (datomic.api/db (d/connect uri)) 17592186045473)" "(datomic.api/ident (datomic.api/db (d/connect uri)) 17592186045473)" "(datomic.api/datoms (datomic.api/db (d/connect uri)) 17592186045473)" "(datomic.api/entid (datomic.api/db (d/connect uri)) 17592186045473)" "(querywrap '[\:find ?sec\\n             \:where \\n             [?p \:db/id 17592186045473]\\n             [?p \:db/value ?sec]] nil)" "(querywrap '[\:find ?sec\\n             \:where \\n             [?p  17592186045473]\\n             [?p \:db/value ?sec]] nil)" "(defn get-resume[type]\\n  (first \\n    (first \\n      (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type))))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?child ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume[type]\\n  (ffirst\\n      (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type)))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(datomic.api/entity-db 17592186045473)" "(datomic.api/entity (datomic.api/db (d/connect uri)) 17592186045473)" "(datomic.api/entity-db {\:db/id 17592186045473})" "(datomic.api/entity (datomic.api/db (d/connect uri)) {\:db/id 17592186045473})" "(datomic.api/entity-db (datomic.api/db (d/connect uri)) {\:db/id 17592186045473})" "(datomic.api/entity-db {\:db/id 17592186045473})" "(def ent (d/entity (db conn) 17592186045473))" "(def ent (d/entity (d/db conn) 17592186045473))" "(def ent (d/entity (datomic.api/db (d/connect uri)) 17592186045473))" "(seq ent)" "(first (d/entity (datomic.api/db (d/connect uri)) 17592186045473))" "(ffirst (d/entity (datomic.api/db (d/connect uri)) 17592186045473))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cchild ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(first (second (d/entity (datomic.api/db (d/connect uri)) ?child))) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(first (second (d/entity (datomic.api/db (d/connect uri)) ?child))) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(first (second (datomic.api/entity (datomic.api/db (d/connect uri)) ?child))) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume[type]\\n  (ffirst\\n      (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type)))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(first (second (datomic.api/entity (datomic.api/db (datomic.api/connect uri)) ?child))) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(first (second (datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child))) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\"))?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume[type]\\n  (ffirst\\n      (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type)))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\"))?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(empy? ?set) ?isempty]\\n              [(not ?isempty)]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\"))?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count? ?set) ?cnt]\\n              [> ?cnt 0]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\"))?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count ?set) ?cnt]\\n              [> ?cnt 0]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\"))?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count ?set) ?cnt]\\n              [(> ?cnt 0)]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\"))?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count ?set) ?cnt]\\n              [(< ?cnt 0)]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?set ?cnt \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\"))?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count ?set) ?cnt]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?set ?cnt \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\"))?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count ?set) ?cnt]\\n              [(\= ?cnt  0)]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?set ?cnt \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\"))?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count ?set) ?cnt]\\n              [(\!\= ?cnt  0)]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?cnt \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\"))?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count ?set) ?cnt]\\n              [(\!\= ?cnt  0)]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume[type]\\n  (ffirst\\n      (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type)))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?cnt \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\"))?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count ?set) ?cnt]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(drop-while empty? (get-resume-mapping (get-resume \\"Clojure\\")))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?cnt \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\"))?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\"))?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\"))?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(drop-while empty? (get-resume-mapping (get-resume \\"Clojure\\")))" "(apply drop-while empty? (get-resume-mapping (get-resume \\"Clojure\\")))" "(filter \#(not (empty? %))(get-resume-mapping (get-resume \\"Clojure\\")))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count ?set) ?cntSet]\\n              [(< 0 ?cntSet)]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?set \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count ?set) ?cntSet]\\n              [(> 0 ?cntSet)]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?set ?cnt \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count ?set) ?cnt]] parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?modset ?cnt \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count ?set) ?cnt]\\n              [(> ?cnt 0) ?gz]\\n              [ (if ?gz ?set nil) ?modset]]\\n              parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count ?set) ?cnt]\\n              [(> ?cnt 0) ?gz]\\n              [ (if ?gz ?set) ?modset]]\\n              parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count ?set) ?cnt]\\n              [(> ?cnt 0) ?gz]\\n              [ (if ?gz ?set \\"\\") ?modset]]\\n              parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count ?set) ?cnt]\\n              [(> ?cnt 0) ?gz]\\n              [ (if ?gz ?set) ?modset]]\\n              parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count ?set) ?cnt]\\n              [(> ?cnt 0) ?gz]\\n              [ (if ?gz ?set) ?modset]]\\n              parent))" "(remove nil? (get-resume-mapping (get-resume \\"Clojure\\")))" "(defn get-resume-mapping [parent]\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\n              \:where \\n              [?t position/parent ?parent]\\n              [?t position/child ?child]\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\n              [(first ?ent) ?fent]\\n              [(second ?fent) ?cname]\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\n              [(count ?set) ?cnt]\\n              [(> ?cnt 0) ?gz]\\n              [ (if ?gz ?set) ?modset]]\\n              parent))" "(drop-while nil? (get-resume-mapping (get-resume \\"Clojure\\")))" "(drop-while empty? (get-resume-mapping (get-resume \\"Clojure\\")))" "(defn remove-nested [coll value]\\n  (let [str (str coll)\\n        nstr (. str replace \\"nil\\" \\" \\")]\\n    nstr))" "(remove-nested [1 [nil] [2]] \\"nil\\")" "(defn remove-nested [coll value]\\n  (let [str (str coll)\\n        nstr (. str replace \\"nil\\" \\"\\")]\\n    nstr))" "(remove-nested [1 [nil] [2]] \\"nil\\")" "(defn remove-nil [coll value]\\n        (. (str coll) replace \\"nil\\" \\"\\"))" "(remove-nested [1 [nil] [2]] \\"nil\\")" "(remove-nil (get-resume-mapping (get-resume \\"Clojure\\")) nil)" "(defn remove-nil [coll]\\n        (*read-eval* (. (str coll) replace \\"nil\\" \\"\\")))" "(remove-nil (get-resume-mapping (get-resume \\"Clojure\\")) nil)" "(defn remove-nil [coll]\\n        (eval (. (str coll) replace \\"nil\\" \\"\\")))" "(remove-nil (get-resume-mapping (get-resume \\"Clojure\\")) nil)" "(defn remove-nil [coll]\\n        (read-string (. (str coll) replace \\"nil\\" \\"\\")))" "(remove-nil (get-resume-mapping (get-resume \\"Clojure\\")) nil)" "(remove-nil (get-resume-mapping (get-resume \\"Clojure\\")))" "(defn get-resume-map [type]\\n  (let [res-type (get-resume-type type)\\n        res-raw-map (get-resume-mapping res-type)\\n        res-clean-map (remove-nil res-raw-map)]\\n    res-clean-map))" "(defn get-resume-type[type]\\r\\n     (ffirst\\r\\n         (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type)))" "(defn get-resume-map [type]\\n  (let [res-type (get-resume-type type)\\n        res-raw-map (get-resume-mapping res-type)\\n        res-clean-map (remove-nil res-raw-map)]\\n    res-clean-map))" "(defn get-resume-mapping [parent]\\r\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\r\\n              \:where \\r\\n              [?t position/parent ?parent]\\r\\n              [?t position/child ?child]\\r\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\r\\n              [(first ?ent) ?fent]\\r\\n              [(second ?fent) ?cname]\\r\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(get-resume-map (get-resume \\"Clojure\\"))" "(get-resume \\"Clojure\\")" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(get-resume-mapping \\"Clojure\\")" "(get-resume-map \\"Clojure\\")" "defn get-resume-type[type]\\r\\n     (ffirst\\r\\n         (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type)))\\r\\n\\r\\n(defn resume-hierical-query [parent]\\r\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\r\\n              \:where \\r\\n              [?t position/parent ?parent]\\r\\n              [?t position/child ?child]\\r\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\r\\n              [(first ?ent) ?fent]\\r\\n              [(second ?fent) ?cname]\\r\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              parent))\\r\\n\\r\\n\\r\\n(defn get-resume-map [type]\\r\\n  (let [res-type (get-resume-type type)\\r\\n        res-raw-map ( resume-hierical-query res-type)\\r\\n        res-clean-map (read-string (. (str res-raw-map) replace \\"nil\\" \\"\\"))]\\r\\n    res-clean-map))\\r\\n\\r\\n(get-resume-map \\"Clojure\\")" "(defn get-resume-type[type]\\r\\n     (ffirst\\r\\n         (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type)))" "(defn resume-hierical-query [parent]\\r\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\r\\n              \:where \\r\\n              [?t position/parent ?parent]\\r\\n              [?t position/child ?child]\\r\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\r\\n              [(first ?ent) ?fent]\\r\\n              [(second ?fent) ?cname]\\r\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              parent))" "(defn get-resume-map [type]\\r\\n  (let [res-type (get-resume-type type)\\r\\n        res-raw-map ( resume-hierical-query res-type)\\r\\n        res-clean-map (read-string (. (str res-raw-map) replace \\"nil\\" \\"\\"))]\\r\\n    res-clean-map))" "(get-resume-map \\"Clojure\\")" "(defn resume-hierical-query [parent]\\r\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\r\\n              \:where \\r\\n              [?t position/parent ?parent]\\r\\n              [?t position/child ?child]\\r\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\r\\n              [(first ?ent) ?fent]\\r\\n              [(second ?fent) ?cname]\\r\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set \\"\!\!NOVAL\!\!\\") ?modset]]\\r\\n              parent))" "(get-resume-mapping (get-resume \\"Clojure\\"))" "(resume-hierical-query (get-resume \\"Clojure\\"))" "(defn resume-hierical-query [parent]\\r\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\r\\n              \:where \\r\\n              [?t position/parent ?parent]\\r\\n              [?t position/child ?child]\\r\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\r\\n              [(first ?ent) ?fent]\\r\\n              [(second ?fent) ?cname]\\r\\n              [(data.resumedata/get-resume-mapping ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set \\"\!\!NOVAL\!\!\\") ?modset]]\\r\\n              parent))" "(resume-hierical-query (get-resume \\"Clojure\\"))" "(+ 1 1)" "(get-resume \\"Clojure\\")" "(data/get-resume-map \\"Clojure\\")" "\\r\\n(defn parse-resume-data \\r\\n  ([data] parse-resume-data data 0)\\r\\n  ([data level] \\n    (if (coll? data) \\n      true \\n      false)))" "(parse-resume-data [1 1 [2 3]])" "\\r\\n(defn parse-resume-data \\r\\n  ([data] parse-resume-data data 0)\\r\\n  ([data level result] \\n    (if (coll? data) \\n      1 \\n      0)))" "(parse-resume-data [1 1 [2 3]])" "(parse-resume-data 1)" "\\r\\n(defn parse-resume-data \\r\\n  ([data] parse-resume-data data 0)\\r\\n  ([data level result] \\n    (if (vector? data) \\n      1 \\n      0)))" "(parse-resume-data 1)" "\\r\\n(defn parse-resume-data \\r\\n  ([data] parse-resume-data data 0 nil)\\r\\n  ([data level result] \\n    (if (vector? data) \\n      1 \\n      0)))" "(parse-resume-data 1)" "(parse-resume-data [1]\\n                   )" "\\r\\n(defn parse-resume-data \\r\\n  ([data] parse-resume-data data 0 nil)\\r\\n  ([data level result] \\n    \\"test\\"))" "(parse-resume-data [1]\\n                   )" "\\r\\n(defn parse-resume-data \\r\\n  ([data] parse-resume-data data 0 nil)\\r\\n  ([data level result] (print \\"test\\")))" "(parse-resume-data [1]\\n                   )" "\\r\\n(defn parse-resume-data \\r\\n  ([data] \\"test\\")\\r\\n  ([data level result] (print \\"test\\")))" "(parse-resume-data [1]\\n                   )" "\\r\\n(defn parse-resume-data \\r\\n  ([data] (parse-resume-data data 0 nil))\\r\\n  ([data level result] (print \\"test\\")))" "(parse-resume-data [1]\\n                   )" "\\r\\n(defn parse-resume-data \\r\\n  ([data] (parse-resume-data data 0 nil))\\r\\n  ([data level result] \\n    (if (vector? data) \\n      1 \\n      0)))" "(parse-resume-data [1]\\n                   )" "\\r\\n(defn parse-resume-data \\r\\n  ([data] (parse-resume-data data 0 nil))\\r\\n  ([data level result] \\n    (for [data level result]\\n      (if (not (nil? data))\\n        result\\n       (recur (rest data) \\n              (inc level) (concat \\"test\\" result))))))" "\\r\\n(defn parse-resume-data \\r\\n  ([data] (parse-resume-data data 0 nil))\\r\\n  ([data level result] \\n    (loop [data level result]\\n      (if (not (nil? data))\\n        result\\n        (if (coll? (first data))\\n          (recur (rest data) (inc level) (concat \\"test\\" result))\\n          \\n       (recur (rest data) (inc level) (concat \\"test\\" result))))))" "(get-resume \\"Clojure\\")" "(data/get-resume-map \\"Clojure\\")" "(map (fn [value] (print \\"td\: \\" value)) [\\"test\\"])" "(map (fn [value] (print \\"td\: \\" value)) [\\"test\\" \\"for\\"])" "(map (fn [value] (print \\"<h1> \\" value \\"</h1\\")) [\\"test\\" \\"for\\"])" "(map (fn [value] (print \\"<h1> \\" value \\"</h1>\\")) [\\"test\\" \\"for\\"])" "(defn parse-res [data]\\n  (map (fn [value] (print \\"<h1> \\" value \\"</h1>\\")) data))" "(parse-res [\\"one\\" \\"two\\"])" "(defn parse-res [data level]\\n  (map (fn [value] (print \\"<h1> \\" value \\"</h1>\\")) data))" "(defn get-tag [level value]\\n  (case\\n    (or (nil? level) (\= 0 level))\\n    (print \\"<h1>\\" value \\"</h1>\\\\n\\")\\n    (\= 1 level)\\n    (print \\"<h1>\\" value \\"</h1>\\\\n\\")))" "(get-tag nil test)" "(get-tag nil \\"test\\")" "(defn get-tag [level value]\\n  (case\\n    (or (nil? level) (\= 0 level))\\n    (print \\"<h1>\\" value \\"</h1>\\\\n\\")\\n    (\= 1 level)\\n    (print \\"<h1>\\" value \\"</h1>\\\\n\\")))" "(defn parse-res [data level]\\n  (map (fn [value] (print \\"<h1> \\" value \\"</h1>\\")) data))" "(col? \#{})" "(col? {})" "(coll? {})" "(coll? \#{})" "(coll? [])" "(defn parse-res [data level]\\n  (map (fn [value] (if (coll? data)\\n                     (parse-res (first data) (inc level))\\n                     (get-tag data level)))))" "(parse-res [1 2 3] nil)" "(parse-res [1 2 3])" "(parse-res [1 2 3] 0)" "(defn parse-res [data level]\\n  (map (fn [value] (if (coll? value)\\n                     (parse-res (first data) (inc level))\\n                     (get-tag value level))) data))" "(parse-res [1 2 3] 0)" "(defn parse-res [data level]\\n  (map (fn [value] \\n         (if (coll? value)\\n          (parse-res (first data) (inc level))\\n          (get-tag value level))) data))" "(parse-res [1 2 3] 0)" "(defn get-tag [level value]\\n  (case\\n    (or (nil? level) (\= 0 level))\\n    (print \\"<h1>\\" value \\"</h1>\\\\n\\")\\n    (\= 1 level)\\n    (print \\"<h1>\\" value \\"</h1>\\\\n\\")))" "(defn parse-res [data level]\\n  (map (fn [value] \\n         (if (coll? value)\\n          (parse-res (first data) (inc level))\\n          (get-tag value level))) data))" "(parse-res [1 2 3] 0)" "(defn get-tag [value level]\\n  (case\\n    (or (nil? level) (\= 0 level))\\n    (print \\"<h1>\\" value \\"</h1>\\\\n\\")\\n    (\= 1 level)\\n    (print \\"<h1>\\" value \\"</h1>\\\\n\\")))" "(parse-res [1 2 3] 0)" "(parse-res [1 2 3[4]] 0)" "(defn parse-res [data level]\\n  (map (fn [value] \\n         (if (coll? value)\\n          (parse-res [(first data)] (inc level))\\n          (get-tag value level))) data))" "(parse-res [1 2 3[4]] 0)" "(defn parse-res [data level]\\n  (map (fn [value] \\n         (if (coll? value)\\n          (parse-res [(first value)] (inc level))\\n          (get-tag value level))) data))" "(parse-res [1 2 3[4]] 0)" "(parse-res [1 2 3[4] [5]] 0)" "(parse-res [1 2 3] 1)" "(parse-res [1 2 3[4] [5]] 1)" "(defn get-tag [value level]\\n  (case\\n    (or (nil? level) (\= 0 level))\\n    (print \\"<h1>\\" value \\"</h1>\\\\n\\")\\n    (\= 1 level)\\n    (print \\"<h2>\\" value \\"</h2>\\\\n\\")))" "(parse-res [1 2 3[4] [5]] 0)" "(defn get-tag [value level]\\n  (case\\n    (or (nil? level) (\= 0 level))\\n    (print \\"<h1>\\" value \\"</h1>\\\\n\\")\\n    (\= 1 level)\\n    (print \\"<h2>\\" value \\"</h2>\\\\n\\")\\n    (\= 2 level)\\r\\n    (print \\"<h3>\\" value \\"</h3>\\\\n\\")))" "(defn get-tag [value level]\\n  (case\\n    (or (nil? level) (\= 0 level))\\n    (println \\"<h1>\\" value \\"</h1>\\")\\n    (\= 1 level)\\n    (println \\"<h2>\\" value \\"</h2>\\")\\n    (\= 2 level)\\r\\n    (println \\"<h3>\\" value \\"</h3>\\")))" "(defn get-tag [value level]\\n  (case level\\n    0\\n    (println \\"<h1>\\" value \\"</h1>\\")\\n    1\\n    (println \\"<h2>\\" value \\"</h2>\\")\\n    2\\r\\n    (println \\"<h3>\\" value \\"</h3>\\")))" "(parse-res [1 2 3[4] [5]] 0)" "(parse-res [1 2 3[4] [5 [6]]] 0)" "(defn parse-res [data level]\\n  (map (fn [value] \\n         (if (coll? value)\\n          (do (parse-res [(first value)] (inc level))\\n            (parse-res [(rest value)] (inc level))\\n          (get-tag value level))) data)))" "(parse-res [1 2 3[4] [5 [6]]] 0)" "(defn parse-res [data level]\\n  (map (fn [value] \\n         (if (coll? value)\\n          (do (parse-res [(first value)] (inc level))\\n            (parse-res [(rest value)] (inc level)))\\n          (get-tag value level))) data))" "(parse-res [1 2 3[4] [5 [6]]] 0)" "(defn parse-res [data level]\\n  (if (not (nil? data))\\n  (map (fn [value] \\n         (if (coll? value)\\n          (do (parse-res [(first value)] (inc level))\\n            (parse-res [(rest value)] (inc level)))\\n          (get-tag value level))) data)))" "(parse-res [1 2 3[4] [5 [6]]] 0)" "(defn parse-res [data level]\\n  (map (fn [value] \\n         (if (coll? value)\\n          (parse-res [(first value)] (inc level))\\n          (get-tag value level))) data))" "(parse-res [1 2 3[4] [ [6]]] 0)" "(defn parse-res [data level]\\n  (map (fn [value] \\n         (if (coll? value)\\n          (parse-res  value) (inc level))\\n          (get-tag value level)) data))" "(parse-res [1 2 3[4] [ [6]]] 0)" "(defn parse-res [data level]\\n  (map (fn [value] \\n         (if (coll? value)\\n          (parse-res  value (inc level))\\n          (get-tag value level))) data))" "(parse-res [1 2 3[4] [ [6]]] 0)" "(defn parse-res [data level]\\n  (map (fn [value] \\n         (if (coll? value)\\n          (parse-res  value (inc level))\\n          (get-tag value level))) data))" "(parse-res (data/get-resume-map \\"Clojure\\") 0)" "(data/get-resume-map \\"Clojure\\")" "(defn get-tag [value level]\\n  (case level\\n    0\\n    (println \\"<h1>\\" value \\"</h1>\\")\\n    1\\n    (println \\"<h2>\\" value \\"</h2>\\")\\n    2\\r\\n    (println \\"<h3>\\" value \\"</h3>\\")))" "(defn get-tag [value level]\\n  (case level\\n    0\\n    (println \\"<h1>\\" value \\"</h1>\\")\\n    1\\n    (println \\"<h2>\\" value \\"</h2>\\")\\n    2\\r\\n    (println \\"<h3>\\" value \\"</h3>\\")\\n    3\\n    (println \\"<h3>\\" value \\"</h3>\\")\\n    \:defualt\\n    (println \\"<h3>\\" value \\"</h3>\\")))" "(parse-res (data/get-resume-map \\"Clojure\\") 0)" "(defn get-tag [value level]\\n  (case level\\n    0\\n    (println \\"<h1>\\" value \\"</h1>\\")\\n    1\\n    (println \\"<h2>\\" value \\"</h2>\\")\\n    2\\r\\n    (println \\"<h3>\\" value \\"</h3>\\")\\n    3\\n    (println \\"<h3>\\" value \\"</h3>\\")\\n    (println \\"<h3>\\" value \\"</h3>\\")))" "(parse-res (data/get-resume-map \\"Clojure\\") 0)" "(defn get-tag [value level]\\n  (case level\\n    1\\n    (println \\"<h1>\\" value \\"</h1>\\")\\n    2\\n    (println \\"<h2>\\" value \\"</h2>\\")\\n    3\\r\\n    (println \\"<h3>\\" value \\"</h3>\\")\\n    4\\n    (println \\"<h3>\\" value \\"</h3>\\")\\n    (println \\"<h3>\\" value \\"</h3>\\")))" "(parse-res (data/get-resume-map \\"Clojure\\") 0)" "(defn parse-res [data level]\\n  (map (fn [value] \\n         (if (coll? value)\\n          (parse-res  value level)\\n          (if (set? value)\\n            (parse-res  value (inc level))\\n            (get-tag value level))) data)))" "(parse-res (data/get-resume-map \\"Clojure\\") 0)" "(defn parse-res [data level]\\n  (map (fn [value] \\n         (if (coll? value)\\n          (parse-res  value level)\\n          (if (set? value)\\n            (parse-res  value (inc level))\\n            (get-tag value level)))) data))" "(parse-res (data/get-resume-map \\"Clojure\\") 0)" "(defn parse-res [data level]\\n  (map (fn [value] \\n         (if (vec? value)\\n          (parse-res  value level)\\n          (if (set? value)\\n            (parse-res  value (inc level))\\n            (get-tag value level)))) data))" "(defn parse-res [data level]\\n  (map (fn [value] \\n         (if (vector? value)\\n          (parse-res  value level)\\n          (if (set? value)\\n            (parse-res  value (inc level))\\n            (get-tag value level)))) data))" "(parse-res (data/get-resume-map \\"Clojure\\") 0)" " (data/get-resume-map \\"Clojure\\")" "(defn parse-res [data level]\\n  (map (fn [value] \\n         (if (vector? value)\\n           (parse-res  value level)\\n           (if (set? value)\\n             (parse-res  value (inc level))\\n             (get-tag value level)))) data))" "(defn get-tag [value level]\\n  (case level\\n    1\\n    (println \\"<h1>\\" value \\"</h1>\\")\\n    2\\n    (println \\"<h2>\\" value \\"</h2>\\")\\n    3\\r\\n    (println \\"<h3>\\" value \\"</h3>\\")\\n    4\\n    (println \\"<h3>\\" value \\"</h3>\\")\\n    (println \\"<h3>\\" value \\"</h3>\\")))" "(defn parse-res [data level]\\n  (map (fn [value] \\n         (if (vector? value)\\n           (parse-res  value level)\\n           (if (set? value)\\n             (parse-res  value (inc level))\\n             (get-tag value level)))) data))" " (defn get-tag [value level]\\r\\n   (case level\\r\\n     1\\r\\n     (println \\"<h1>\\" value \\"</h1>\\")\\r\\n     2\\r\\n     (println \\"<h2>\\" value \\"</h2>\\")\\r\\n     3\\r\\n     (println \\"<h3>\\" value \\"</h3>\\")\\r\\n     4\\r\\n     (println \\"<h3>\\" value \\"</h3>\\")\\r\\n     (println \\"<h3>\\" value \\"</h3>\\")))\\r\\n \\r\\n ; hierchy parser\\r\\n (defn parse-res [data level]\\r\\n   (map (fn [value] \\r\\n          (if (vector? value)\\r\\n            (parse-res  value level)\\r\\n            (if (set? value)\\r\\n             (parse-res  value (inc level))\\r\\n             (get-tag value level)))) data))" "(data/get-resume-map \\"Clojure\\")" " ; Generate tag based on level\\r\\n (defn get-tag [value level]\\r\\n   (case level\\r\\n     1\\r\\n     (println \\"<h1>\\" value \\"</h1>\\")\\r\\n     2\\r\\n     (println \\"<h2>\\" value \\"</h2>\\")\\r\\n     3\\r\\n     (println \\"<h3>\\" value \\"</h3>\\")\\r\\n     4\\r\\n     (println \\"<h3>\\" value \\"</h3>\\")\\r\\n     (println \\"<h3>\\" value \\"</h3>\\")))\\r\\n \\r\\n ; hierchy parser\\r\\n (defn parse-res [data level]\\r\\n   (map (fn [value] \\r\\n          (if (vector? value)\\r\\n            (parse-res  value level)\\r\\n            (if (set? value)\\r\\n             (parse-res  value (inc level))\\r\\n             (get-tag value level)))) data))" "(parse-res (data/get-resume-map \\"Clojure\\"))" "(parse-res (data/get-resume-map \\"Clojure\\") 0)" " ; Generate tag based on level\\r\\n (defn get-tag [value level]\\r\\n   (case level\\r\\n     0\\r\\n     (println \\"<h1>\\" value \\"</h1>\\")\\r\\n     1\\r\\n     (println \\"<h2>\\" value \\"</h2>\\")\\r\\n     2\\r\\n     (println \\"<h3>\\" value \\"</h3>\\")\\r\\n     3\\r\\n     (println \\"<h3>\\" value \\"</h3>\\")\\r\\n     (println \\"<h3>\\" value \\"</h3>\\")))\\r\\n \\r\\n ; hierchy parser\\r\\n (defn parse-res [data level]\\r\\n   (map (fn [value] \\r\\n          (if (vector? value)\\r\\n            (parse-res  value level)\\r\\n            (if (set? value)\\r\\n             (parse-res  value (inc level))\\r\\n             (get-tag value level)))) data))" "(parse-res (data/get-resume-map \\"Clojure\\") 0)" "(parse-res [1])" "(parse-res [1] 0" "(parse-res [1] 0)" "(parse-res [1 2 3] 0)" "\\r\\n ; hierchy parser\\r\\n (defn parse-res [data level]\\r\\n   (remove ?nil  (map (fn [value] \\r\\n          (if (vector? value)\\r\\n            (parse-res  value level)\\r\\n            (if (set? value)\\r\\n             (parse-res  value (inc level))\\r\\n             (get-tag value level)))) data)))" "\\r\\n ; hierchy parser\\r\\n (defn parse-res [data level]\\r\\n   (remove nil?  (map (fn [value] \\r\\n          (if (vector? value)\\r\\n            (parse-res  value level)\\r\\n            (if (set? value)\\r\\n             (parse-res  value (inc level))\\r\\n             (get-tag value level)))) data)))" "(parse-res [1 2 3] 0)" "(parse-res (data/get-resume-map \\"Clojure\\") 0)" "\\r\\n ; hierchy parser\\r\\n (defn parse-res [data level]\\r\\n  (flatten (remove nil?  (map (fn [value] \\r\\n          (if (vector? value)\\r\\n            (parse-res  value level)\\r\\n            (if (set? value)\\r\\n             (parse-res  value (inc level))\\r\\n             (get-tag value level)))) data))))" "(parse-res (data/get-resume-map \\"Clojure\\") 0)" "\\r\\n ; hierchy parser\\r\\n (defn parse-res [data level]\\r\\n  (flatten \\n    [(remove nil?  (map (fn [value] \\r\\n          (if (vector? value)\\r\\n            (parse-res  value level)\\r\\n            (if (set? value)\\r\\n             (parse-res  value (inc level))\\r\\n             (get-tag value level)))) data))]))" "(parse-res (data/get-resume-map \\"Clojure\\") 0)" "(data/get-resume-map \\"Clojure\\")" "  (require 'om-tools.dom)" " ; Generate tag based on level\\r\\n (defn get-tag [value level]\\r\\n   (case level\\r\\n     0 (d/h1 value)\\r\\n     1 (d/h2 value)\\r\\n     2 (d/h3 value)\\r\\n     3 (d/h4 value)\\r\\n     (d/h5 value)))\\r\\n \\r\\n ; hierchy parser\\r\\n (defn parse-res [data level]\\r\\n  (flatten \\r\\n    [(remove nil?  (map (fn [value] \\r\\n          (if (vector? value)\\r\\n            (parse-res  value level)\\r\\n            (if (set? value)\\r\\n             (parse-res  value (inc level))\\r\\n             (get-tag value level)))) data))]))" " ; Generate tag based on level\\r\\n (defn get-tag [value level]\\r\\n   (case level \\r\\n     0 (om-tools.dom/h1 value)\\r\\n     1 (om-tools.dom/h2 value)\\r\\n     2 (om-tools.dom/h3 value)\\r\\n     3 (om-tools.dom/h4 value)\\r\\n     (om-tools.dom /h5 value)))\\r\\n \\r\\n ; hierchy parser\\r\\n (defn parse-res [data level]\\r\\n  (flatten \\r\\n    [(remove nil?  (map (fn [value] \\r\\n          (if (vector? value)\\r\\n            (parse-res  value level)\\r\\n            (if (set? value)\\r\\n             (parse-res  value (inc level))\\r\\n             (get-tag value level)))) data))]))" " ; Generate tag based on level\\r\\n (defn get-tag [value level]\\r\\n   (case level \\r\\n     0 (om-tools.dom/h1 value)\\r\\n     1 (om-tools.dom/h2 value)\\r\\n     2 (om-tools.dom/h3 value)\\r\\n     3 (om-tools.dom/h4 value)\\r\\n     (om-tools.dom/h5 value)))\\r\\n \\r\\n ; hierchy parser\\r\\n (defn parse-res [data level]\\r\\n  (flatten \\r\\n    [(remove nil?  (map (fn [value] \\r\\n          (if (vector? value)\\r\\n            (parse-res  value level)\\r\\n            (if (set? value)\\r\\n             (parse-res  value (inc level))\\r\\n             (get-tag value level)))) data))]))" "(str [1 [11]])" "(str [1 \#{[11]}])" "(str (data/get-resume-map \\"Clojure\\"))" "(read-string (str (data/get-resume-map \\"Clojure\\")))" "(get-resume \\"Clojure\\")" "(data/get-resume-map \\"Clojure\\")" "(ns data.resumedata)" "(defn resume-hierical-query [parent]\\r\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\r\\n              \:where \\r\\n              [?t position/parent ?parent]\\r\\n              [?t position/child ?child]\\r\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\r\\n              [(first ?ent) ?fent]\\r\\n              [(second ?fent) ?cname]\\r\\n              [(data.resumedata/resume-hierical-query ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              parent))" "(get-resume-map \\"Clojure\\")" "(defn resume-hierical-query [parent]\\r\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\r\\n              \:where \\r\\n              [?t position/parent ?parent]\\r\\n              [?t position/child ?child]\\r\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\r\\n              [(first ?ent) ?cname]\\r\\n             ; [(second ?fent) ?cname]\\r\\n              [(data.resumedata/resume-hierical-query ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              parent))" "(get-resume-map \\"Clojure\\")" "(defn resume-hierical-query [parent]\\r\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\r\\n              \:where \\r\\n              [?t position/parent ?parent]\\r\\n              [?t position/child ?child]\\r\\n              [(str (datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child)) ?cname]\\r\\n             ; [(first ?ent) ?fent]\\r\\n             ; [(second ?fent) ?cname]\\r\\n              [(data.resumedata/resume-hierical-query ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              parent))" "(get-resume-map \\"Clojure\\")" "(defn resume-hierical-query [parent]\\r\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\r\\n              \:where \\r\\n              [?t position/parent ?parent]\\r\\n              [?t position/child ?child]\\r\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\r\\n              ;[(first ?ent) ?fent]\\r\\n              [(str ?ent) ?cname]\\r\\n              [(data.resumedata/resume-hierical-query ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              parent))" "(get-resume-map \\"Clojure\\")" "(defn resume-hierical-query [parent]\\r\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\r\\n              \:where \\r\\n              [?t position/parent ?parent]\\r\\n              [?t position/child ?child]\\r\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\r\\n              [(first ?ent) ?fent]\\r\\n              [(second ?fent) ?cname]\\r\\n              [(data.resumedata/resume-hierical-query ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              parent))" "(get-resume-map \\"Clojure\\")" "(defn resume-hierical-query [parent]\\r\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\r\\n              \:where \\r\\n              [?t position/parent ?parent]\\r\\n              [?t position/child ?child]\\r\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?cname]\\r\\n              [(first ?ent) ?fent]\\r\\n              [(second ?fent) ?cname]\\r\\n              [(data.resumedata/resume-hierical-query ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              parent))" "(get-resume-map \\"Clojure\\")" "(defn resume-hierical-query [parent]\\r\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\r\\n              \:where \\r\\n              [?t position/parent ?parent]\\r\\n              [?t position/child ?child]\\r\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?cname]\\r\\n             ; [(first ?ent) ?fent]\\r\\n              ;[(second ?fent) ?cname]\\r\\n              [(data.resumedata/resume-hierical-query ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              parent))" "(get-resume-map \\"Clojure\\")" "(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) 17592186045477)" "(data.resumedata/resume-hierical-query 17592186045462)" "(data.resumedata/resume-hierical-query 17592186045477)" " (querywrap '[\:find ?name \:in $ ?parent \\r\\n              \:where \\r\\n              [?t  \:job/emp-name ?name]] nil)" " (querywrap '[\:find ?name \:in $ ?parent \\r\\n              \:where \\r\\n              [?t  \:job/emp-name ?name]] )" " (querywrap '[\:find ?name \:in $ ?parent \\r\\n              \:where \\r\\n              [?t  \:job/emp-name ?name]] _)" " (querywrap '[\:find ?name \:in $ ?parent \\r\\n              \:where \\r\\n              [?t  \:job/emp-name ?name]] nil )" "(q '[\:find ?name \:in $ ?parent \\r\\n     \:where \\r\\n     [?t  \:job/emp-name ?name]] \\n   (d/db conn))" "(q '[\:find ?name \:in $ ?parent \\r\\n     \:where \\r\\n     [?t  \:job/emp-name ?name]] \\n   (d/db (d/connect uri)))" "(data.resumedata/querywrap \\n  '[\:find ?info \:where[_ \:job/emp-name ?info]]\\n  nil)" "(data.resumedata/querywrap \\n  '[\:find ?info \\n    \:where\\n    [_ \:job/emp-name ?info]]\\n  nil)" "(data.resumedata/querywrap \\n  '[\:find ?info ?start ?end ?title\\n    \:where\\n    [?p \:job/emp-name ?info]\\n    [?p \:job/date-start ?start]\\n    [?p \:job/date-end ?end]\\n    [?p \:job/title ?title]]\\n  nil)" "(apply str\\n       (data.resumedata/querywrap \\r\\n  '[\:find ?info ?start ?end ?title\\r\\n    \:where\\r\\n    [?p \:job/emp-name ?info]\\r\\n    [?p \:job/date-start ?start]\\r\\n    [?p \:job/date-end ?end]\\r\\n    [?p \:job/title ?title]]\\r\\n  nil))" "(concat\\n       (data.resumedata/querywrap \\r\\n  '[\:find ?info ?start ?end ?title\\r\\n    \:where\\r\\n    [?p \:job/emp-name ?info]\\r\\n    [?p \:job/date-start ?start]\\r\\n    [?p \:job/date-end ?end]\\r\\n    [?p \:job/title ?title]]\\r\\n  nil))" "(apply concat\\n       (data.resumedata/querywrap \\r\\n  '[\:find ?info ?start ?end ?title\\r\\n    \:where\\r\\n    [?p \:job/emp-name ?info]\\r\\n    [?p \:job/date-start ?start]\\r\\n    [?p \:job/date-end ?end]\\r\\n    [?p \:job/title ?title]]\\r\\n  nil))" "(data.resumedata/querywrap \\r\\n     '[\:find ?info ?start ?end ?title\\r\\n       \:where\\r\\n       [?p \:job/emp-name ?info]\\r\\n       [?p \:job/date-start ?start]\\r\\n       [?p \:job/date-end ?end]\\r\\n       [?p \:job/title ?title]]" "(data.resumedata/querywrap \\n  '[\:find ?info ?start ?end ?title\\n    \:where\\n    [?p \:job/emp-name ?info]\\n    [?p \:job/date-start ?start]\\n    [?p \:job/date-end ?end]\\n    [?p \:job/title ?title]]\\n  nil)" "(defn get-jobs []\\n  (data.resumedata/querywrap \\n    '[\:find ?info ?start ?end ?title\\n      \:where\\n      [?p \:job/emp-name ?info]\\n      [?p \:job/date-start ?start]\\n      [?p \:job/date-end ?end]\\n      [?p \:job/title ?title]]\\n    nil))" "(get-jobs)" "(defn init-db []\\r\\n  (when (d/create-database uri)\\r\\n    (let [conn (d/connect uri)]\\r\\n      @(d/transact conn schema-tx)\\r\\n      @(d/transact conn data-tx))))" "(get-jobs)" "(let [conn (d/connect uri)]\\r\\n      @(d/transact conn schema-tx)\\r\\n      @(d/transact conn data-tx))" "(let [conn (datomic.api/connect uri)]\\r\\n      @(datomic.api/transact conn schema-tx)\\r\\n      @(datomic.api/transact conn data-tx))" "(def uri \\"datomic\:mem\://resume\\")\\r\\n\\r\\n(def schema-tx (read-string (slurp \\"resources/schema/resumeSchema.edn\\")))\\r\\n\\r\\n(def data-tx (read-string (slurp \\"resources/schema/resumeData.edn\\")))\\r\\n\\n\\n(let [conn (datomic.api/connect uri)]\\r\\n         @(datomic.api/transact conn schema-tx)\\r\\n         @(datomic.api/transact conn data-tx))" "(get-jobs)" "(def uri \\"datomic\:mem\://resume\\")\\r\\n\\r\\n(def schema-tx (read-string (slurp \\"resources/schema/resumeSchema.edn\\")))\\r\\n\\r\\n(def data-tx (read-string (slurp \\"resources/schema/resumeData.edn\\")))\\r\\n\\n\\n(let [conn (datomic.api/connect uri)]\\r\\n         @(datomic.api/transact conn schema-tx)\\r\\n         @(datomic.api/transact conn data-tx))" "(get-jobs)" "(def uri \\"datomic\:mem\://resume\\")\\r\\n\\r\\n(def schema-tx (read-string (slurp \\"resources/schema/resumeSchema.edn\\")))\\r\\n\\r\\n(def data-tx (read-string (slurp \\"resources/schema/resumeData.edn\\")))\\r\\n\\n\\n(let [conn (datomic.api/connect uri)]\\r\\n         @(datomic.api/transact conn schema-tx)\\r\\n         @(datomic.api/transact conn data-tx))" "(get-jobs)" "(def uri \\"datomic\:mem\://resume\\")\\r\\n\\r\\n(def schema-tx (read-string (slurp \\"resources/schema/resumeSchema.edn\\")))\\r\\n\\r\\n(def data-tx (read-string (slurp \\"resources/schema/resumeData.edn\\")))\\r\\n\\n\\n(let [conn (datomic.api/connect uri)]\\r\\n         @(datomic.api/transact conn schema-tx)\\r\\n         @(datomic.api/transact conn data-tx))" "(get-jobs)" "(def uri \\"datomic\:mem\://resume\\")\\r\\n\\r\\n(def schema-tx (read-string (slurp \\"resources/schema/resumeSchema.edn\\")))\\r\\n\\r\\n(def data-tx (read-string (slurp \\"resources/schema/resumeData.edn\\")))\\r\\n\\n\\n(let [conn (datomic.api/connect uri)]\\r\\n         @(datomic.api/transact conn schema-tx)\\r\\n         @(datomic.api/transact conn data-tx))" "(get-jobs)" "(def uri \\"datomic\:mem\://resume\\")\\r\\n\\r\\n(def schema-tx (read-string (slurp \\"resources/schema/resumeSchema.edn\\")))\\r\\n\\r\\n(def data-tx (read-string (slurp \\"resources/schema/resumeData.edn\\")))\\r\\n\\n\\n(let [conn (datomic.api/connect uri)]\\r\\n         @(datomic.api/transact conn schema-tx)\\r\\n         @(datomic.api/transact conn data-tx))" "(get-jobs)" "(def uri \\"datomic\:mem\://resume\\")\\r\\n\\r\\n(def schema-tx (read-string (slurp \\"resources/schema/resumeSchema.edn\\")))\\r\\n\\r\\n(def data-tx (read-string (slurp \\"resources/schema/resumeData.edn\\")))\\r\\n\\n\\n(let [conn (datomic.api/connect uri)]\\r\\n         @(datomic.api/transact conn schema-tx)\\r\\n         @(datomic.api/transact conn data-tx))" "(get-jobs)" "(defn resume-hierical-query [resume-type]\\r\\n (querywrap '[\:find ?cname ?modset \:in $ ?resume-type \\r\\n              \:where \\r\\n              [?restype \:resume/resumetype ?resume-type]\\r\\n              [?restype position/child ?child]\\r\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\r\\n              [(first ?ent) ?fent]\\r\\n              [(second ?fent) ?cname]\\r\\n              [(data.resumedata/resume-hierical-query ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              resume-type))" "(defn resume-hierical-query [resume-type]\\r\\n (data.resumedata/querywrap '[\:find ?cname ?modset \:in $ ?resume-type \\r\\n              \:where \\r\\n              [?restype \:resume/resumetype ?resume-type]\\r\\n              [?restype position/child ?child]\\r\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\r\\n              [(first ?ent) ?fent]\\r\\n              [(second ?fent) ?cname]\\r\\n              [(data.resumedata/resume-hierical-query ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              resume-type))" "(resume-hierical-query \\"Clojure\\")" "(defn resume-hierical-query [resume-type]\\r\\n (data.resumedata/querywrap '[\:find ?cname \:in $ ?resume-type \\r\\n              \:where \\r\\n              [?restype \:resume/resumetype ?resume-type]\\r\\n              [?restype position/child ?child]\\r\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\r\\n              [(first ?ent) ?fent]\\r\\n              [(second ?fent) ?cname]\\r\\n              [(data.resumedata/resume-hierical-query ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              resume-type))" "(resume-hierical-query \\"Clojure\\")" "(defn resume-hierical-query [resume-type]\\r\\n (data.resumedata/querywrap '[\:find ?set \:in $ ?resume-type \\r\\n              \:where \\r\\n              [?restype \:resume/resumetype ?resume-type]\\r\\n              [?restype position/child ?child]\\r\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\r\\n              [(first ?ent) ?fent]\\r\\n              [(second ?fent) ?cname]\\r\\n              [(data.resumedata/resume-hierical-query ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              resume-type))" "(resume-hierical-query \\"Clojure\\")" "(defn resume-hierical-query [resume-type]\\r\\n (data.resumedata/querywrap '[\:find ?restype \:in $ ?resume-type \\r\\n              \:where \\r\\n              [?restype \:resume/resumetype ?resume-type]]\\r\\n              resume-type))" "(resume-hierical-query \\"Clojure\\")" "(defn resume-hierical-query [resume-type]\\r\\n (data.resumedata/querywrap '[\:find ?cname \:in $ ?resume-type \\r\\n              \:where \\r\\n              [?restype \:resume/resumetype ?resume-type]\\n               [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?restype) ?cname]]\\r\\n              resume-type))" "(resume-hierical-query \\"Clojure\\")" "(defn resume-hierical-query [resume-type]\\r\\n (data.resumedata/querywrap '[\:find ?cname \:in $ ?resume-type \\r\\n              \:where \\r\\n              [?restype \:resume/resumetype ?resume-type]\\n               [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?restype) ?ent]\\n               [(first ?ent) ?fent]\\r\\n                 [(second ?fent) ?cname]]\\r\\n              resume-type))" "(resume-hierical-query \\"Clojure\\")" "(defn resume-hierical-query [resume-type]\\r\\n (data.resumedata/querywrap '[\:find ?cname \:in $ ?resume-type \\r\\n              \:where \\r\\n              [?restype \:resume/resumetype ?resume-type]\\n               [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?restype) ?ent]\\n               [(apply first ?ent) ?fent]\\r\\n                [(apply second ?fent) ?cname]]\\r\\n              resume-type))" "(resume-hierical-query \\"Clojure\\")" "(defn resume-hierical-query [resume-type]\\r\\n (data.resumedata/querywrap '[\:find ?cname \:in $ ?resume-type \\r\\n              \:where \\r\\n              [?restype \:resume/resumetype ?resume-type]\\n               [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?restype) ?ent]\\n               [(second ?ent) ?fent]\\r\\n                [(second second ?fent) ?cname]]\\r\\n              resume-type))" "(resume-hierical-query \\"Clojure\\")" "(defn resume-hierical-query [resume-type]\\r\\n (data.resumedata/querywrap '[\:find ?cname \:in $ ?resume-type \\r\\n              \:where \\r\\n              [?restype \:resume/resumetype ?resume-type]\\n               [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?restype) ?ent]\\n               [(first ?ent) ?fent]\\r\\n                [(second second ?fent) ?cname]]\\r\\n              resume-type))" "(resume-hierical-query \\"Clojure\\")" "(defn resume-hierical-query [resume-type]\\r\\n (data.resumedata/querywrap '[\:find ?cname \:in $ ?resume-type \\r\\n              \:where \\r\\n              [?restype \:resume/resumetype ?resume-type]\\n               [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?restype) ?ent]\\n               [(first ?ent) ?fent]\\r\\n                [(second  ?fent) ?cname]]\\r\\n              resume-type))" "(resume-hierical-query \\"Clojure\\")" "(defn resume-hierical-query [resume-type]\\r\\n (data.resumedata/querywrap '[\:find ?cname \:in $ ?resume-type \\r\\n              \:where \\r\\n              [?restype \:resume/resumetype ?resume-type]\\n               [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?restype) ?ent]\\n               [(second ?ent) ?fent]\\r\\n                [(second  ?fent) ?cname]]\\r\\n              resume-type))" "(resume-hierical-query \\"Clojure\\")" "(defn resume-hierical-query [resume-type]\\r\\n (data.resumedata/querywrap '[\:find ?cname \:in $ ?resume-type \\r\\n              \:where \\r\\n              [?restype \:resume/resumetype ?resume-type]\\n]\\r\\n              resume-type))" "(resume-hierical-query \\"Clojure\\")" "(defn resume-hierical-query [resume-type]\\r\\n (data.resumedata/querywrap '[\:find ?cname ?ent\:in $ ?resume-type \\r\\n              \:where \\r\\n              [?restype \:resume/resumetype ?resume-type]\\n               [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?restype) ?ent]\\n               [(first ?ent) ?fent]\\r\\n                [(second  ?fent) ?cname]]\\r\\n              resume-type))" "(resume-hierical-query \\"Clojure\\")" "(defn resume-hierical-query [resume-type]\\r\\n (data.resumedata/querywrap '[\:find ?cname ?ent \:in $ ?resume-type \\r\\n              \:where \\r\\n              [?restype \:resume/resumetype ?resume-type]\\n               [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?restype) ?ent]\\n               [(first ?ent) ?fent]\\r\\n                [(second  ?fent) ?cname]]\\r\\n              resume-type))" "(resume-hierical-query \\"Clojure\\")" "(defn resume-hierical-query [resume-type]\\r\\n (data.resumedata/querywrap '[\:find ?cname ?ent \:in $ ?resume-type \\r\\n              \:where \\r\\n              [?restype \:resume/resumetype ?resume-type]\\n               [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?restype) ?ent]\\n               [(first ?ent) ?fent]\\r\\n                [(second  ?fent) ?cname]\\n                [(data.resumedata/resume-hierical-query ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              resume-type))" "(resume-hierical-query \\"Clojure\\")" "(defn resume-hierical-query [resume-type]\\r\\n (data.resumedata/querywrap '[\:find ?cname ?ent \:in $ ?resume-type \\r\\n              \:where \\r\\n              [?restype \:resume/resumetype ?resume-type]\\n               [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?restype) ?ent]\\n               [(first ?ent) ?fent]\\r\\n                [(second  ?fent) ?cname]\\n                [(data.resumedata/resume-hierical-query ?ent) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              resume-type))" "(resume-hierical-query \\"Clojure\\")" "(defn resume-hierical-query [parent]\\r\\n (querywrap '[\:find ?cname ?modset \:in $ ?parent \\r\\n              \:where \\r\\n              [?t position/parent ?parent]\\r\\n              [?t position/child ?child]\\r\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\r\\n              [(first ?ent) ?fent]\\r\\n              [(second ?fent) ?cname]\\r\\n              [(data.resumedata/resume-hierical-query ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              parent))" "(defn resume-hierical-query [parent]\\r\\n (data.resumedata/querywrap '[\:find ?cname ?modset \:in $ ?parent \\r\\n              \:where \\r\\n              [?t position/parent ?parent]\\r\\n              [?t position/child ?child]\\r\\n              [(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) ?child) ?ent]\\r\\n              [(first ?ent) ?fent]\\r\\n              [(second ?fent) ?cname]\\r\\n              [(data.resumedata/resume-hierical-query ?child) ?set]\\r\\n              [(count ?set) ?cnt]\\r\\n              [(> ?cnt 0) ?gz]\\r\\n              [ (if ?gz ?set) ?modset]]\\r\\n              parent))" "(defn get-resume-type[type]\\r\\n     (ffirst\\r\\n         (data.resumedata/querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type)))" "(get-resume-type \\"Clojure\\")_" "(get-resume-type \\"Clojure\\")" "(resume-hierical-query (get-resume-type \\"Clojure\\"))" "(defn get-resume-map [type]\\r\\n  (let [res-type (get-resume-type type)\\r\\n        res-raw-map ( resume-hierical-query res-type)\\r\\n        res-clean-map (read-string (. (str res-raw-map) replace \\"nil\\" \\"\\"))]\\r\\n    res-clean-map))\\r\\n\\r\\n(defn get-jobs []\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?info ?start ?end ?title\\r\\n      \:where\\r\\n      [?p \:job/emp-name ?info]\\r\\n      [?p \:job/date-start ?start]\\r\\n      [?p \:job/date-end ?end]\\r\\n      [?p \:job/title ?title]]\\r\\n    nil))" "(get-resume-map \\"Clojure\\")" "(get-jobs)" "(def uri \\"datomic\:mem\://resume\\")\\r\\n\\r\\n(def schema-tx (read-string (slurp \\"resources/schema/resumeSchema.edn\\")))\\r\\n\\r\\n(def data-tx (read-string (slurp \\"resources/schema/resumeData.edn\\")))\\r\\n\\n\\n(let [conn (datomic.api/connect uri)]\\r\\n         @(datomic.api/transact conn schema-tx)\\r\\n         @(datomic.api/transact conn data-tx))" "(get-resume-map \\"Clojure\\")" "(def uri \\"datomic\:mem\://resume\\")\\r\\n\\r\\n(def schema-tx (read-string (slurp \\"resources/schema/resumeSchema.edn\\")))\\r\\n\\r\\n(def data-tx (read-string (slurp \\"resources/schema/resumeData.edn\\")))\\r\\n\\n\\n(let [conn (datomic.api/connect uri)]\\r\\n         @(datomic.api/transact conn schema-tx)\\r\\n         @(datomic.api/transact conn data-tx))" "(get-resume-map \\"Clojure\\")" "(ns 'data.resumedata)" "(data.resumedata/querywrap\\n  '[\:find ?stuff \:where [_ \:resume/resumetype ?stuff]] nil )" "(data.resumedata/querywrap\\r\\n  '[\:find ?stuff \:where [_ \:resume/resumetype ?stuff]] nil )" "(data.resumedata/querywrap\\r\\n  '[\:find ?stuff \:where [?p \:resume/resumetype ?stuff]] nil )" "(data.resumedata/querywrap\\r\\n  '[\:find ?p \:where [?p \:resume/resumetype ?stuff]] nil )" "(data.resumedata/querywrap\\r\\n  '[\:find ?p \:where [?p \:resume/resumetype]] nil )" "(def uri \\"datomic\:mem\://resume\\")\\r\\n\\r\\n(def schema-tx (read-string (slurp \\"resources/schema/resumeSchema.edn\\")))\\r\\n\\r\\n(def data-tx (read-string (slurp \\"resources/schema/resumeData.edn\\")))\\r\\n\\n\\n(let [conn (datomic.api/connect uri)]\\r\\n         @(datomic.api/transact conn schema-tx)\\r\\n         @(datomic.api/transact conn data-tx))" "(data.resumedata/querywrap\\r\\n  '[\:find ?p \:where [?p \:resume/resumetype]] nil )" "(data.resumedata/querywrap\\r\\n  '[\:find ?stuff \:where [?p \:resume/resumetype ?stuff]] nil )" "(data.resumedata/querywrap\\r\\n  '[\:find ?p \:where [_ \:resume/resumetype ?p]] nil )" "(data.resumedata/querywrap\\r\\n  '[\:find ?p \:where [?p \:resume/resumetype]] nil )" "(def uri \\"datomic\:mem\://resume\\")\\r\\n\\r\\n(def schema-tx (read-string (slurp \\"resources/schema/resumeSchema.edn\\")))\\r\\n\\r\\n(def data-tx (read-string (slurp \\"resources/schema/resumeData.edn\\")))\\r\\n\\n\\n(let [conn (datomic.api/connect uri)]\\r\\n         @(datomic.api/transact conn schema-tx)\\r\\n         @(datomic.api/transact conn data-tx))" "(data.resumedata/querywrap\\r\\n  '[\:find ?p \:where [?p \:resume/resumetype]] nil )" "(data.resumedata/querywrap\\r\\n  '[\:find ?p \:where [_ \:resume/resumetype ?p]] nil )" "(get-resume-map \\"Clojure\\")" "(resume-hierical-query (get-resume-type \\"Clojure\\"))" "y (get-resume-type \\"Clojure\\")" "(data.resumedata/querywrap\\r\\n  '[\:find ?p \:where [?p \:resume/resumetype]] nil )" "(data.resumedata/querywrap\\r\\n  '[\:find ?p \\n    \:where \\n    [?p \:resume/resumetype]\\n    [?p \:position/child]])" "(data.resumedata/querywrap\\r\\n  '[\:find ?p ?set\\n    \:where \\n    [?p \:resume/resumetype]\\n    [?p \:position/child ?set]])" "(data.resumedata/querywrap\\r\\n  '[\:find ?p ?set\\n    \:where \\n    [?p \:resume/resumetype]\\n    [?p \:position/child ?set]] nil)" "(data.resumedata/querywrap\\r\\n  '[\:find ?set\\n    \:where \\n    [?p \:resume/resumetype]\\n    [?p \:position/child ?set]] nil)" "\\n(defn hq [parent]\\n  (data.resumedata/querywrap\\r\\n  '[\:find ?set\\n      \:where \\n      [?p \:resume/resumetype]\\n      [?p \:position/child ?set]\\n      ] nil))" "(hq 17592186045418)" "\\n(defn hq [parent]\\n  (data.resumedata/querywrap\\r\\n  '[\:find ?set ?sub\\n      \:where \\n      [?p \:resume/resumetype]\\n      [?p \:position/child ?set]\\n      [?set \:position/child ?sub]\\n      ] nil))" "(hq 17592186045418)" "\\n(defn hq [parent]\\n  (data.resumedata/querywrap\\r\\n  '[\:find ?set ?sub\\n      \:where \\n      [?p \:resume/resumetype]\\n      [?p \:position/child ?set]\\n      [(hq ?set) ?sub]\\n      ] nil))" "(hq 17592186045418)" "\\n(defn hq [parent]\\n  (data.resumedata/querywrap\\r\\n  '[\:find ?set ?sub\\n      \:where \\n      [?p \:resume/resumetype]\\n      [?p \:position/child ?set]\\n     ; [(hq ?set) ?sub]\\n      ] nil))" "(hq 17592186045418)" "\\n(defn hq [parent]\\n  (data.resumedata/querywrap\\r\\n  '[\:find ?set ?sub\\n      \:where \\n      [?p \:resume/resumetype]\\n      [?p \:position/child ?set]\\n      [(first ?set) ?f]\\n      [(hq ?f) ?sub]\\n      ] nil))" "(hq 17592186045418)" "\\n(defn hq [parent]\\n  (data.resumedata/querywrap\\r\\n  '[\:find ?set ?sub\\n      \:where \\n      [?p \:resume/resumetype]\\n      [?p \:position/child ?set]\\n      [(first ?set) ?f]\\n      [(data.resumedata/hq ?f) ?sub]\\n      ] nil))" "(hq 17592186045418)" "\\n(defn hq [parent]\\n  (data.resumedata/querywrap\\r\\n  '[\:find ?set ?sub\\n      \:where \\n      [?p \:resume/resumetype]\\n      [?p \:position/child ?set]\\n      ;[(first ?set) ?f]\\n      [(data.resumedata/hq ?set) ?sub]\\n      ] nil))" "(hq 17592186045418)" "\\n(defn hq [parent]\\n  (data.resumedata/querywrap\\r\\n  '[\:find ?set ;?sub\\n      \:where \\n      [?p \:resume/resumetype]\\n      [?p \:position/child ?set]\\n      ;[(first ?set) ?f]\\n     ; [(data.resumedata/hq ?set) ?sub]\\n      ] nil))" "(hq 17592186045418)" "\\n(map (fn [v] (apply hq v)) (hq 17592186045418))" "\\n(map (fn [v] (apply hq v)) \#{[17592186045420] [17592186045419] [17592186045422] [17592186045421] [17592186045423]})" "\\n(map (fn [v] (\\n               hq v)) \#{[17592186045420] [17592186045419] [17592186045422] [17592186045421] [17592186045423]})" "\\n(map hq \#{[17592186045420] [17592186045419] [17592186045422] [17592186045421] [17592186045423]})" "(hq 17592186045419)" "(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) 17592186045419)" "(second (datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) 17592186045419))" "(ffirst (datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) 17592186045419))" "(first (second (datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) 17592186045419)))" "\\n(map \#(second hq %) \#{[17592186045420] [17592186045419] [17592186045422] [17592186045421] [17592186045423]})" "\\n(map \#(second (hq %)) \#{[17592186045420] [17592186045419] [17592186045422] [17592186045421] [17592186045423]})" "\\n(map \#(hq %) \#{[17592186045420] [17592186045419] [17592186045422] [17592186045421] [17592186045423]})" "\\n(get-jobs)" "(get-jobs \\"Clojure\\")" "(get-resume-map \\"Clojure\\")" "(get-resume-type \\"Clojure\\")" "(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) 17592186045418)" "(first (datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) 17592186045418))" "(second (datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) 17592186045418))" "(\:position/child (datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) 17592186045418))" "(datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) 17592186045419\\n                    )" "(\:position/child (datomic.api/entity (datomic.api/db (datomic.api/connect \\"datomic\:mem\://resume\\")) 17592186045419)\\n                      )" "\\n(defn hq [parent]\\n  (data.resumedata/querywrap\\r\\n  '[\:find ?set ;?sub\\n    \:in $ ?in\\n      \:where \\n      [?p  ?in]\\n      [?p \:position/child ?set]\\n      ] nil))" "(get-resume-type \\"Clojure\\")" "(hq (get-resume-type \\"Clojure\\"))" "\\n(defn hq [parent]\\n  (data.resumedata/querywrap\\r\\n  '[\:find ?set ;?sub\\n    \:in $ ?in\\n      \:where \\n      [?p  ?in]\\n      [?p \:position/child ?set]\\n      ] parent))" "(hq (get-resume-type \\"Clojure\\"))" "\\n(defn hq [parent]\\n  (data.resumedata/querywrap\\r\\n  '[\:find ?p ;?sub\\n    \:in $ ?in\\n      \:where \\n      [?p  ?in]\\n      [?p \:position/child ?set]\\n      ] parent))" "(hq (get-resume-type \\"Clojure\\"))" "\\n(defn hq [parent]\\n  (data.resumedata/querywrap\\r\\n  '[\:find ?set ;?sub\\n    \:in $ ?in\\n      \:where \\n      [?p \#{[17592186045420] [17592186045419] [17592186045422] [17592186045421] [17592186045423]}]\\n      [?p \:position/child ?set]\\n      ] parent))" "(hq (get-resume-type \\"Clojure\\"))" "\\n(defn hq [parent]\\n  (data.resumedata/querywrap\\r\\n  '[\:find ?set ;?sub\\n    \:in $ ?in\\n      \:where \\n      [?p  \#{{\:db/id 17592186045439} {\:db/id 17592186045441} {\:db/id 17592186045444} {\:db/id 17592186045440} {\:db/id 17592186045438} {\:db/id 17592186045443} {\:db/id 17592186045442} {\:db/id 17592186045445}}]\\n      [?p \:position/child ?set]\\n      ] parent))" "(hq (get-resume-type \\"Clojure\\"))" "\\n(defn hq [parent]\\n  (data.resumedata/querywrap\\r\\n  '[\:find ?p ;?sub\\n    \:in $ ?in\\n      \:where \\n      [?p \:db/id  17592186045440]\\n      ] parent))" "(hq (get-resume-type \\"Clojure\\"))" "(get-jobs)" "(defn get-jobs []\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?info ?start ?end ?degree ?description\\r\\n      \:where\\r\\n      [?p \:education/emp-name ?info]\\r\\n      [?p \:education/date-start ?start]\\r\\n      [?p \:education/date-end ?end]\\r\\n      [?p \:education/degree ?degree]\\n      [?p \:education/description ?description]]\\r\\n    nil))" "(defn get-education []\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?info ?start ?end ?degree ?gpa ?description\\r\\n      \:where\\r\\n      [?p \:education/emp-name ?info]\\r\\n      [?p \:education/date-start ?start]\\r\\n      [?p \:education/date-end ?end]\\r\\n      [?p \:education/degree ?degree]\\n      [?p \:education/gpa ?gpa]\\n      [?p \:education/description ?description]]\\r\\n    nil))" "(get-education)" "(defn get-education []\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?info ?start ?end ?degree ?gpa ?description\\r\\n      \:where\\r\\n      [?p \:education/college-name ?info]\\r\\n      [?p \:education/date-start ?start]\\r\\n      [?p \:education/date-end ?end]\\r\\n      [?p \:education/degree ?degree]\\n      [?p \:education/gpa ?gpa]\\n      [?p \:education/description ?description]]\\r\\n    nil))" "(get-education)" "(get-jobs)" "(defn get-education []\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?name ?start ?end ?degree ?gpa ?description\\r\\n      \:where\\r\\n      [?p \:education/college-name ?name]\\r\\n      [?p \:education/date-start ?start]\\r\\n      [?p \:education/date-end ?end]\\r\\n      [?p \:education/degree ?degree]\\r\\n      [?p \:education/gpa ?gpa]\\r\\n      [?p \:education/description ?description]]\\r\\n    nil))" "(get-education)" "(data.resumedata/querywrap \\r\\n    '[\:find ?name ?start ?end ?degree ?gpa ?description\\r\\n      \:where\\r\\n      [?p \:education/college-name ?name]\\r\\n      [?p \:education/date-start ?start]\\r\\n      [?p \:education/date-end ?end]\\r\\n      [?p \:education/degree ?degree]\\r\\n      [?p \:education/gpa ?gpa]\\r\\n      [?p \:education/description ?description]]\\r\\n    nil)" "(data.resumedata/querywrap \\r\\n    '[\:find ?name ?start ?end ?degree ?gpa ?description\\r\\n      \:where\\r\\n      [?p \:education/college-name ?name]\\r\\n      [?p \:education/date-start ?start]\\r\\n      [?p \:education/date-end ?end]\\r\\n      [?p \:education/degree ?degree]\\r\\n      [?p \:education/gpa ?gpa]]\\r\\n    nil)" "(data.resumedata/querywrap \\r\\n    '[\:find ?name ?start ?end ?degree ?gpa\\r\\n      \:where\\r\\n      [?p \:education/college-name ?name]\\r\\n      [?p \:education/date-start ?start]\\r\\n      [?p \:education/date-end ?end]\\r\\n      [?p \:education/degree ?degree]\\r\\n      [?p \:education/gpa ?gpa]]\\r\\n    nil)" "(get-education)" "(defn get-profile []\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:where\\r\\n      [?p \:profile/title ?title]\\r\\n      [?p \:profile/description ?desc]]\\r\\n    nil))" "(get-profile)" "(defn get-project []\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:where\\r\\n      [?p \:project/title ?title]\\r\\n      [?p \:project/description ?desc]]\\r\\n    nil))" "(get-project)" "(defn get-concept []\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:where\\r\\n      [?p \:concept/title ?title]\\r\\n      [?p \:concept/summary ?desc]]\\r\\n    nil))" "(get-concept)" "(defn get-concept [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:where\\n      \:in ?res-type\\n      [?p \:concept/resumetype ?res-type]\\r\\n      [?p \:concept/title ?title]\\r\\n      [?p \:concept/summary ?desc]]\\r\\n    res-id))" "(get-resume-type \\"Clojure\\")" "(get-concept (get-resume-type \\"Clojure\\"))" "(defn get-concept [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:where\\n      \:in $ ?res-type\\n      [?p \:concept/resumetype ?res-type]\\r\\n      [?p \:concept/title ?title]\\r\\n      [?p \:concept/summary ?desc]]\\r\\n    res-id))" "(get-concept (get-resume-type \\"Clojure\\"))" "(defn get-concept [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\n      \:in $ ?res-type\\r\\n      \:where\\n      [?p \:concept/resumetype ?res-type]\\r\\n      [?p \:concept/title ?title]\\r\\n      [?p \:concept/summary ?desc]]\\r\\n    res-id))" "(get-concept (get-resume-type \\"Clojure\\"))" "(ns 'data.resumedata)" "(ns data.resumedata)" "(defn get-resume [resume]\\n  (let [res-id (get-resume resume)]\\r\\n  {\:project (get-project res-ind)\\n   \:concept  (get-concept res-id)\\n   \:profile   (get-profile res-id)\\n   \:education (get-profile res-id)\\n   \:job (get-jobs res-id)}))" "(defn get-resume [resume]\\n  (let [res-id (get-resume resume)]\\r\\n  {\:project (get-project res-id)\\n   \:concept  (get-concept res-id)\\n   \:profile   (get-profile res-id)\\n   \:education (get-profile res-id)\\n   \:job (get-jobs res-id)}))" "(get-resume \\"Clojure\\")" "(get-resume-type \\"Clojure\\")" "(defn get-resume [resume]\\n  (let [res-id (get-resume-type \\"Clojure\\")]\\r\\n  {\:project (get-project res-id)\\n   \:concept  (get-concept res-id)\\n   \:profile   (get-profile res-id)\\n   \:education (get-profile res-id)\\n   \:job (get-jobs res-id)}))" "(get-resume \\"Clojure\\")" "(defn get-resume [resume]\\r\\n  (let [res-id (get-resume-type resume)]\\r\\n  {\:project (get-project res-id)\\r\\n   \:concept  (get-concept res-id)\\r\\n   \:profile   (get-profile res-id)\\r\\n   \:education (get-profile res-id)\\r\\n   \:job (get-jobs res-id)}))" "(get-resume \\"Clojure\\")" "(defn get-resume-types []\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?p ?res-type\\r\\n      \:where\\r\\n      [?p \:resume/resumetype ?res-type]]\\r\\n    nil))" "(get-resume-types)" "(data/get-resume-types)" "(ns data.resumedata)" "(get-resume-types)" "(+ 1 1)" "(data/get-resume 17592186045418)" "(int \\"17592186045418\\")" "(Integer \\"17592186045418\\")" "(.parseInt Integer   \\"17592186045418\\")" "(.parseInteger Integer   \\"17592186045418\\")" "(Integer/parseIntr   \\"17592186045418\\")" "(Integer/parseInt\\n  \\"17592186045418\\")" "(read-string \\"17592186045418\\")" "(get-resume-type \\"Clojure\\")" "(get-profile 17592186045418)" "(defn get-profile [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title [?desc]\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:profile/resumetype ?res-type]\\r\\n      [?p \:profile/title ?title]\\r\\n      [?p \:profile/description ?desc]]\\r\\n    res-id))" "(get-profile 17592186045418)" "(defn get-profile [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title [?desc]\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:profile/resumetype ?res-type]\\r\\n      [?p \:profile/title ?title]\\r\\n      [?p \:profile/description ?desc]]\\r\\n    res-id))" "(defn get-profile-desc" "(defn get-profile-desc [title]\\n   (data.resumedata/querywrap \\r\\n       '[\:find ?title [?desc]\\r\\n         \:in $ ?title\\r\\n         \:where\\r\\n         [?p \:profile/title ?title]\\r\\n         [?p \:profile/description ?desc]]\\r\\n       title))" "(get-profile-desc \\"Software Engineer\\")" "(defn get-profile-desc [title]\\n   (data.resumedata/querywrap \\r\\n       '[\:find ?desc\\r\\n         \:in $ ?title\\r\\n         \:where\\r\\n         [?p \:profile/title ?title]\\r\\n         [?p \:profile/description ?desc]]\\r\\n       title))" "(get-profile-desc \\"Software Engineer\\")" "(defn get-profile [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title [?desc]\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:profile/resumetype ?res-type]\\r\\n      [?p \:profile/title ?title]\\r\\n      [?p \:profile/description ?desc]]\\r\\n    res-id))" "(defn get-profile-desc [title-id]\\n   (data.resumedata/querywrap \\r\\n       '[\:find ?desc\\r\\n         \:in $ ?title\\r\\n         \:where\\r\\n         [?p \:profile/title ?title]\\r\\n         [?title \:profile/description ?desc]]\\r\\n       title))" "(defn get-profile-desc [id]\\n   (data.resumedata/querywrap \\r\\n       '[\:find ?desc\\r\\n         \:in $ ?id\\r\\n         \:where\\r\\n         [?id \:profile/description ?desc]]\\r\\n       id))" "(defn get-profile [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title [?desc]\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:profile/resumetype ?res-type]\\r\\n      [?p \:profile/title ?title]\\r\\n      [(get-profile-desc ?p)]]\\r\\n    res-id))" "(get-profile 17592186045418)" "(defn get-profile [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:profile/resumetype ?res-type]\\r\\n      [?p \:profile/title ?title]\\r\\n      [(get-profile-desc ?p)]]\\r\\n    res-id))" "(get-profile 17592186045418)" "(defn get-profile [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:profile/resumetype ?res-type]\\r\\n      [?p \:profile/title ?title]\\r\\n      [(get-profile-desc ?p) ?desc]]\\r\\n    res-id))" "(get-profile 17592186045418)" "(defn get-profile [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:profile/resumetype ?res-type]\\r\\n      [?p \:profile/title ?title]\\r\\n      [(data.resumedata/get-profile-desc ?p) ?desc]]\\r\\n    res-id))" "(get-profile 17592186045418)" "(defn get-profile [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:profile/resumetype ?res-type]\\r\\n      [?p \:profile/title ?title]\\r\\n      [(data.resumedata/get-profile-desc ?p) ?desc]]\\r\\n    res-id))" "(defn get-profile-desc [title-id]\\n   (data.resumedata/querywrap \\r\\n       '[\:find ?desc\\r\\n         \:in $ ?title\\r\\n         \:where\\r\\n         [?p \:profile/title ?title]\\r\\n         [?title \:profile/description ?desc]]\\r\\n       title))" "(defn get-profile-desc [id]\\n   (data.resumedata/querywrap \\r\\n       '[\:find ?desc\\r\\n         \:in $ ?id\\r\\n         \:where\\r\\n         [?id \:profile/description ?desc]]\\r\\n       id))" "(defn get-profile [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:profile/resumetype ?res-type]\\r\\n      [?p \:profile/title ?title]\\r\\n      [(data.resumedata/get-profile-desc ?p) ?desc]]\\r\\n    res-id))" "(get-resume-type \\"Clojure\\")" "(get-project 17592186045418)" "(get-profile 17592186045418)" "(defn get-profile-desc [id]\\r\\n  (concat (data.resumedata/querywrap \\r\\n    '[\:find ?desc\\r\\n      \:in $ ?id\\r\\n      \:where\\r\\n      [?id \:profile/description ?desc]]\\r\\n    id)))" "(get-profile 17592186045418)" "(defn get-profile-desc [id]\\r\\n   (data.resumedata/querywrap \\r\\n    '[\:find ?desc\\r\\n      \:in $ ?id\\r\\n      \:where\\r\\n      [?id \:profile/description ?desc]]\\r\\n    id))" "(get-profile 17592186045418)" "(defn get-profile-desc [id]\\r\\n   (data.resumedata/querywrap \\r\\n    '[\:find ?desc\\r\\n      \:in $ ?id\\r\\n      \:where\\r\\n      [?id \:profile/description ?desc]]\\r\\n    id))" "(defn get-profile [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc ?p\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:profile/resumetype ?res-type]\\r\\n      [?p \:profile/title ?title] \\r\\n      [(data.resumedata/get-profile-desc ?p) ?desc]]\\r\\n    res-id))" "(get-profile 17592186045418)" "(get-profile-desc 17592186045450)" "(defn get-profile-desc [id]\\r\\n   (data.resumedata/querywrap \\r\\n    '[\:find ?desc ?desc-mod\\r\\n      \:in $ ?id\\r\\n      \:where\\r\\n      [?id \:profile/description ?desc]\\n      [_ (str ?desc) ?desc-mod ]]\\r\\n    id))" "(get-profile-desc 17592186045450)" "(clas str)" "(classs str)" "(class str)" "(defn get-profile-desc [id]\\r\\n   (data.resumedata/querywrap \\r\\n    '[\:find ?desc ?desc-mod\\r\\n      \:in $ ?id\\r\\n      \:where\\r\\n      [?id \:profile/description ?desc]\\n      [_ (clojure.core$str ?desc) ?desc-mod ]]\\r\\n    id))" "(get-profile-desc 17592186045450)" "(defn get-profile-desc [id]\\r\\n   (data.resumedata/querywrap \\r\\n    '[\:find ?desc ?desc-mod\\r\\n      \:in $ ?id\\r\\n      \:where\\r\\n      [?id \:profile/description ?desc]\\n      [ (clojure.core$str ?desc) ?desc-mod ]]\\r\\n    id))" "(get-profile-desc 17592186045450)" "(defn get-profile-desc [id]\\r\\n   (data.resumedata/querywrap \\r\\n    '[\:find ?desc ?desc-mod\\r\\n      \:in $ ?id\\r\\n      \:where\\r\\n      [?id \:profile/description ?desc]\\n      [ (clojure.core/str ?desc) ?desc-mod ]]\\r\\n    id))" "(get-profile-desc 17592186045450)" "(defn get-profile-desc [id]\\r\\n   (apply concat (data.resumedata/querywrap \\r\\n    '[\:find ?desc\\r\\n      \:in $ ?id\\r\\n      \:where\\r\\n      [?id \:profile/description ?desc]]\\r\\n    id)))" "(get-profile-desc 17592186045450)" "(get-profile 17592186045418)" "(defn get-profile-desc [id]\\r\\n  (into []  \\n        (apply concat (data.resumedata/querywrap \\r\\n                        '[\:find ?desc\\r\\n                          \:in $ ?id\\r\\n                          \:where\\r\\n                          [?id \:profile/description ?desc]]\\r\\n                        id))))" "(get-profile 17592186045418)" "(defn get-profile [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:profile/resumetype ?res-type]\\r\\n      [?p \:profile/title ?title] \\r\\n      [(data.resumedata/get-profile-desc ?p) ?desc]]\\r\\n    res-id))" "(get-profile 17592186045418)" "(defn get-profile-desc [id]\\r\\n  (into []  \\r\\n        (apply concat \\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?desc\\r\\n                   \:in $ ?id\\r\\n                   \:where\\r\\n                   [?id \:profile/description ?desc]]\\r\\n                 id))))\\r\\n\\r\\n(defn get-profile [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:profile/resumetype ?res-type]\\r\\n      [?p \:profile/title ?title]\\r\\n      [(data.resumedata/get-profile-desc ?p) ?desc]]\\r\\n    res-id))" "(get-profile 17592186045418)" "\\r\\n(defn get-profile [res-id]\\r\\n  (into [] \\n        (data.resumedata/querywrap \\r\\n          '[\:find ?title ?desc\\r\\n            \:in $ ?res-type\\r\\n            \:where\\r\\n            [?p \:profile/resumetype ?res-type]\\r\\n            [?p \:profile/title ?title]\\r\\n            [(data.resumedata/get-profile-desc ?p) ?desc]]\\r\\n          res-id)))" "(get-profile 17592186045418)" "(get-project 17592186045418)" "(defn get-project [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:project/resumetype ?res-type]\\r\\n      [?p \:project/title ?title]\\r\\n      [?p \:project/description ?desc]]\\r\\n    res-id))" "(defn get-project-desc [id]\\r\\n  (into []  \\r\\n        (apply concat \\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?desc\\r\\n                   \:in $ ?id\\r\\n                   \:where\\r\\n                   [?id \:project/description ?desc]]\\r\\n                 id))))" "(defn get-project [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:project/resumetype ?res-type]\\r\\n      [?p \:project/title ?title]\\r\\n      [(get-project-desc ?p) ?desc]]\\r\\n    res-id))" "(get-project 17592186045418)" "(defn get-project [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:project/resumetype ?res-type]\\r\\n      [?p \:project/title ?title]\\r\\n      [(data.resumedata/get-project-desc ?p) ?desc]]\\r\\n    res-id))" "(get-project 17592186045418)" "(defn get-desc [id attr]\\r\\n  (into []  \\r\\n        (apply concat \\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?desc\\r\\n                   \:in $ ?id ?attr\\r\\n                   \:where\\r\\n                   [?id ?attr ?desc]]\\r\\n                 [id attr]))))" "(defn get-project [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:project/resumetype ?res-type]\\r\\n      [?p \:project/title ?title]\\r\\n      [(data.resumedata/get-project-desc ?p \:project/description) ?desc]]\\r\\n    res-id))" "(get-project 17592186045418)" "(defn get-project [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:project/resumetype ?res-type]\\r\\n      [?p \:project/title ?title]\\r\\n      [(data.resumedata/get-desc ?p \:project/description) ?desc]]\\r\\n    res-id))" "(get-project 17592186045418)" "(defn get-desc [id attr]\\r\\n  (into []  \\r\\n        (apply concat \\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?desc\\r\\n                   \:in $ ?id ?attr\\r\\n                   \:where\\r\\n                   [?id ?attr ?desc]]\\r\\n                 [id attr]))))" "(defn get-project [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:project/resumetype ?res-type]\\r\\n      [?p \:project/title ?title]\\r\\n      [(data.resumedata/get-desc ?p \:project/description) ?desc]]\\r\\n    res-id))" "(get-project 17592186045418)" "(get-desc 17592186045418 \:project/description)" "(defn get-desc [id attr]\\r\\n  (into []  \\r\\n        (apply concat \\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?desc\\r\\n                   \:in $ ?id ?attr\\r\\n                   \:where\\r\\n                   [?id ?attr ?desc]]\\r\\n                 id attr)))" "(defn get-desc [id attr]\\r\\n  (into []  \\r\\n        (apply concat \\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?desc\\r\\n                   \:in $ ?id ?attr\\r\\n                   \:where\\r\\n                   [?id ?attr ?desc]]\\r\\n                 id attr))))" "(get-desc 17592186045418 \:project/description)" "(defn get-desc [id attr]\\r\\n  (into []  \\r\\n        (apply concat \\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?desc\\r\\n                   \:in $ ?id ?attr\\r\\n                   \:where\\r\\n                   [?id ?attr ?desc]]\\r\\n                 [id attr]))))" "(get-desc 17592186045418 \:project/description)" "(defn get-desc [id attr]\\r\\n  (into []  \\r\\n        (apply concat \\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?desc\\r\\n                   \:in $ ?id ?attr\\r\\n                   \:where\\r\\n                   [?id ?attr ?desc]]\\r\\n                 [id attr]))))" "(defn querywrap [query params]\\r\\n  (let [_ (init-db)\\r\\n        conn (d/connect uri)]\\r\\n    (q query (d/db conn) params)))" "(get-project 17592186045418)" "(get-profile-desc 17592186045450)" "(defn get-desc [id attr]\\r\\n  (into []  \\r\\n        (apply concat \\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?desc\\r\\n                   \:in $ ?id\\r\\n                   \:where\\r\\n                   [?id ?attr ?desc]]\\r\\n                 id))))" "(get-desc 17592186045450)" "(defn get-desc [id attr]\\r\\n  (into []  \\r\\n        (apply concat \\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?desc\\r\\n                   \:in $ ?id\\r\\n                   \:where\\r\\n                   [?id \:project/description ?desc]]\\r\\n                 id))))" "(get-desc 17592186045450)" "(get-desc 17592186045450 _)" "(get-desc 17592186045450 nil)" "(defn get-desc [id attr]\\r\\n  (into []  \\r\\n        (apply concat \\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?desc\\r\\n                   \:in $ ?id\\r\\n                   \:where\\r\\n                   [?id \:project/description ?desc]]\\r\\n                 id atr))))" "(defn get-desc [id attr]\\r\\n  (into []  \\r\\n        (apply concat \\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?desc\\r\\n                   \:in $ ?id\\r\\n                   \:where\\r\\n                   [?id \:project/description ?desc]]\\r\\n                 id attr))))" "(get-desc 17592186045450 nil)" "(defn get-desc [id attr]\\r\\n  (into []  \\r\\n        (apply concat \\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?desc\\r\\n                   \:in $ ?id\\r\\n                   \:where\\r\\n                   [?id \:project/description ?desc]]\\r\\n                 [id attr]))))" "(get-desc 17592186045450 nil)" "(get-desc 17592186045450 \:project/description)" "(defn get-desc [id attr]\\r\\n  (into []  \\r\\n        (apply concat \\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?desc\\r\\n                   \:in $ [?id ?attr]\\r\\n                   \:where\\r\\n                   [?id \:project/description ?desc]]\\r\\n                 [id attr]))))" "(get-desc 17592186045450 \:project/description)" "(defn get-desc [id attr]\\r\\n  (into []  \\r\\n        (apply concat \\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?desc\\r\\n                   \:in $ [?id ?attr]\\r\\n                   \:where\\r\\n                   [?id ?attr ?desc]]\\r\\n                 [id attr]))))" "(get-desc 17592186045450 \:project/description)" "(defn get-project [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:project/resumetype ?res-type]\\r\\n      [?p \:project/title ?title]\\r\\n      [(data.resumedata/get-desc ?p \:project/description) ?desc]]\\r\\n    res-id))" "(get-project 17592186045450 \:project/description)" "(get-project 17592186045450)" "(get-project (get-resume-type \\"Clojure\\"))" "(defn get-desc [id attr]\\r\\n  (into []  \\r\\n        (apply concat \\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?desc\\r\\n                   \:in $ [?id ?attr]\\r\\n                   \:where\\r\\n                   [?id ?attr ?desc]]\\r\\n                 [id attr]))))" "(defn get-profile [res-id]\\r\\n  (into [] \\r\\n        (data.resumedata/querywrap \\r\\n          '[\:find ?title ?desc\\r\\n            \:in $ ?res-type\\r\\n            \:where\\r\\n            [?p \:profile/resumetype ?res-type]\\r\\n            [?p \:profile/title ?title]\\r\\n            [(data.resumedata/get-desc ?p \:profile/description) ?desc]]\\r\\n          res-id)))" "(defn get-project [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:project/resumetype ?res-type]\\r\\n      [?p \:project/title ?title]\\r\\n      [(data.resumedata/get-desc ?p \:project/description) ?desc]]\\r\\n    res-id))" "(get-project (get-resume-type \\"Clojure\\"))" "(get-profile (get-resume-type \\"Clojure\\"))" "(defn get-resume-type[type]\\r\\n     (ffirst\\r\\n         (querywrap '[\:find ?restype \:in $ ?type \:where [?restype \:resume/resumetype ?type]] type)))\\r\\n\\r\\n(defn get-desc [id attr]\\r\\n  (into []  \\r\\n        (apply concat \\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?desc\\r\\n                   \:in $ [?id ?attr]\\r\\n                   \:where\\r\\n                   [?id ?attr ?desc]]\\r\\n                 [id attr]))))\\r\\n\\r\\n(defn get-jobs [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?info ?start ?end ?title\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:job/resumetype ?res-type]\\r\\n      [?p \:job/emp-name ?info]\\r\\n      [?p \:job/date-start ?start]\\r\\n      [?p \:job/date-end ?end]\\r\\n      [?p \:job/title ?title]]\\r\\n    res-id))\\r\\n\\r\\n(defn get-education [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?name ?start ?end ?degree ?gpa ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:education/resumetype ?res-type]\\r\\n      [?p \:education/college-name ?name]\\r\\n      [?p \:education/date-start ?start]\\r\\n      [?p \:education/date-end ?end]\\r\\n      [?p \:education/degree ?degree]\\r\\n      [?p \:education/gpa ?gpa]\\r\\n      [?p (data.resumedata/get-desc ?p \:education/description) ?desc]]\\r\\n    res-id))\\r\\n\\r\\n(defn get-profile [res-id]\\r\\n  (into [] \\r\\n        (data.resumedata/querywrap \\r\\n          '[\:find ?title ?desc\\r\\n            \:in $ ?res-type\\r\\n            \:where\\r\\n            [?p \:profile/resumetype ?res-type]\\r\\n            [?p \:profile/title ?title]\\r\\n            [(data.resumedata/get-desc ?p \:profile/description) ?desc]]\\r\\n          res-id)))\\r\\n\\r\\n(defn get-project [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:project/resumetype ?res-type]\\r\\n      [?p \:project/title ?title]\\r\\n      [(data.resumedata/get-desc ?p \:project/description) ?desc]]\\r\\n    res-id))\\r\\n\\r\\n(defn get-concept [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:concept/resumetype ?res-type]\\r\\n      [?p \:concept/title ?title]\\r\\n       [(data.resumedata/get-desc ?p \:concept/summary) ?desc]]\\r\\n    res-id))\\r\\n\\r\\n(defn get-resume [res-id]\\r\\n  {\:project (get-project res-id)\\r\\n   \:concept  (get-concept res-id)\\r\\n   \:profile   (get-profile res-id)\\r\\n   \:education (get-profile res-id)\\r\\n   \:job (get-jobs res-id)})\\r\\n\\r\\n(defn get-resume-types []\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?p ?res-type\\r\\n      \:where\\r\\n      [?p \:resume/resumetype ?res-type]] nil))" "(get-profile (get-resume-type \\"Clojure\\"))" "(get-concept (get-resume-type \\"Clojure\\"))" "(get-education (get-resume-type \\"Clojure\\"))" "(defn get-education [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?name ?start ?end ?degree ?gpa ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:education/resumetype ?res-type]\\r\\n      [?p \:education/college-name ?name]\\r\\n      [?p \:education/date-start ?start]\\r\\n      [?p \:education/date-end ?end]\\r\\n      [?p \:education/degree ?degree]\\r\\n      [?p \:education/gpa ?gpa]\\r\\n      [(data.resumedata/get-desc ?p \:education/description) ?desc]]\\r\\n    res-id))" "(get-education (get-resume-type \\"Clojure\\"))" "(get-resume (get-resume-type \\"Colojure\\"))" "(get-resume (get-resume-type \\"Clojure\\"))" "(conj [{}] [1 1])" "(apply conj [{}] [ 1 1])" "(ns 'data.resumedata)" "(ns \\n  data.resumedata)" "(get-jobs (get-resume-type \\"Clojure\\"))" "(defn get-job-desc [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find  ?name ?start ?end \\r\\n      \:in $ ?title ?name\\r\\n      \:where\\r\\n      [?p \:job/emp-name ?name]\\r\\n      [?p \:job/title ?title]\\r\\n      [?p \:job/date-start ?start]\\r\\n      [?p \:job/date-end ?end]]\\r\\n    title name))\\r\\n\\r\\n(defn get-jobs [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:job/title ?title]\\r\\n      [?p \:job/emp-name ?name]\\r\\n      [(data.resumedata/get-job-desc ?title ?name) ?desc]]\\r\\n    res-id))" "(defn get-job-desc [title name]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find  ?name ?start ?end \\r\\n      \:in $ ?title ?name\\r\\n      \:where\\r\\n      [?p \:job/emp-name ?name]\\r\\n      [?p \:job/title ?title]\\r\\n      [?p \:job/date-start ?start]\\r\\n      [?p \:job/date-end ?end]]\\r\\n    title name))\\r\\n\\r\\n(defn get-jobs [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:job/title ?title]\\r\\n      [?p \:job/emp-name ?name]\\r\\n      [(data.resumedata/get-job-desc ?title ?name) ?desc]]\\r\\n    res-id))" "(get-jobs (get-resume-type \\"Clojure\\"))" "(defn get-job-desc [title name]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find  ?name ?start ?end \\r\\n      \:in $ ?title ?name\\r\\n      \:where\\r\\n      [?p \:job/emp-name ?name]\\r\\n      [?p \:job/title ?title]\\r\\n      [?p \:job/date-start ?start]\\r\\n      [?p \:job/date-end ?end]]\\r\\n    [title name]))\\r\\n\\r\\n(defn get-jobs [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:job/title ?title]\\r\\n      [?p \:job/emp-name ?name]\\r\\n      [(data.resumedata/get-job-desc ?title ?name) ?desc]]\\r\\n    res-id))" "(get-jobs (get-resume-type \\"Clojure\\"))" "(defn get-job-desc [title name]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find  ?name ?start ?end \\r\\n      \:in $ [?title ?name]\\r\\n      \:where\\r\\n      [?p \:job/emp-name ?name]\\r\\n      [?p \:job/title ?title]\\r\\n      [?p \:job/date-start ?start]\\r\\n      [?p \:job/date-end ?end]]\\r\\n    [title name]))\\r\\n\\r\\n(defn get-jobs [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:job/title ?title]\\r\\n      [?p \:job/emp-name ?name]\\r\\n      [(data.resumedata/get-job-desc ?title ?name) ?desc]]\\r\\n    res-id))" "(get-jobs (get-resume-type \\"Clojure\\"))" "(defn get-job-desc [title name]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find  ?name ?start ?end \\r\\n      \:in $ [?title ?name]\\r\\n      \:where\\r\\n      [?p \:job/emp-name ?name]\\r\\n      [?p \:job/title ?title]\\r\\n      [?p \:job/date-start ?start]\\r\\n      [?p \:job/date-end ?end]]\\r\\n    [title name]))\\r\\n\\r\\n(defn get-jobs [res-id]\\r\\n  (data.resumedata/querywrap \\r\\n    '[\:find ?title ?desc\\r\\n      \:in $ ?res-type\\r\\n      \:where\\r\\n      [?p \:job/title ?title]\\r\\n      [?p \:job/emp-name ?name]\\r\\n      [(data.resumedata/get-job-desc ?title ?name) ?desc]]\\r\\n    res-id))" "(get-jobs (get-resume-type \\"Clojure\\"))" "(get-project (get-resume-type \\"Clojure\\"))" "(defn get-jobs [res-id]\\r\\n  (into []  \\r\\n        (apply concat\\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find ?title ?desc\\r\\n                   \:in $ ?res-type\\r\\n                   \:where\\r\\n                   [?p \:job/title ?title]\\r\\n                   [?p \:job/emp-name ?name]\\r\\n                   [(data.resumedata/get-job-desc ?title ?name) ?desc]]\\r\\n                 res-id))))" "(get-project (get-resume-type \\"Clojure\\"))" "(get-jobs (get-resume-type \\"Clojure\\"))" "(defn get-job-desc [title name]\\r\\n  (into []  \\r\\n        (apply concat\\r\\n               (data.resumedata/querywrap \\r\\n                 '[\:find  ?name ?start ?end \\r\\n                   \:in $ [?title ?name]\\r\\n                   \:where\\r\\n                   [?p \:job/emp-name ?name]\\r\\n                   [?p \:job/title ?title]\\r\\n                   [?p \:job/date-start ?start]\\r\\n                   [?p \:job/date-end ?end]]\\r\\n                 [title name]))))" "(get-jobs (get-resume-type \\"Clojure\\"))"]
eclipse.preferences.version=1
